(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('core-js/modules/es6.object.assign.js'), require('core-js/modules/es6.regexp.match.js'), require('core-js/modules/es6.regexp.split.js'), require('core-js/modules/es6.weak-set.js'), require('core-js/modules/es6.set.js'), require('core-js/modules/es6.weak-map.js'), require('core-js/modules/web.dom.iterable.js'), require('core-js/modules/es6.array.iterator.js'), require('core-js/modules/es6.string.iterator.js'), require('core-js/modules/es6.map.js'), require('core-js/modules/es7.symbol.async-iterator.js'), require('core-js/modules/es6.symbol.js'), require('core-js/modules/es6.regexp.to-string.js'), require('core-js/modules/es6.object.to-string.js'), require('core-js/modules/es6.string.includes.js'), require('core-js/modules/es6.array.copy-within.js'), require('core-js/modules/es7.array.includes.js'), require('core-js/modules/es6.regexp.replace.js'), require('core-js/modules/es6.function.name.js'), require('core-js/modules/es6.number.constructor.js'), require('core-js/modules/es6.regexp.search.js'), require('core-js/modules/es7.string.pad-end.js'), require('core-js/modules/es6.regexp.constructor.js'), require('core-js/modules/es6.string.fixed.js'), require('core-js/modules/es7.string.pad-start.js'), require('core-js/modules/es6.string.repeat.js'), require('core-js/modules/es7.string.trim-right.js'), require('core-js/modules/es7.string.trim-left.js'), require('core-js/modules/es6.array.from.js'), require('core-js/modules/es6.string.ends-with.js'), require('core-js/modules/es6.string.starts-with.js'), require('core-js/modules/es6.array.find.js'), require('core-js/modules/es6.promise.js')) :
  typeof define === 'function' && define.amd ? define(['core-js/modules/es6.object.assign.js', 'core-js/modules/es6.regexp.match.js', 'core-js/modules/es6.regexp.split.js', 'core-js/modules/es6.weak-set.js', 'core-js/modules/es6.set.js', 'core-js/modules/es6.weak-map.js', 'core-js/modules/web.dom.iterable.js', 'core-js/modules/es6.array.iterator.js', 'core-js/modules/es6.string.iterator.js', 'core-js/modules/es6.map.js', 'core-js/modules/es7.symbol.async-iterator.js', 'core-js/modules/es6.symbol.js', 'core-js/modules/es6.regexp.to-string.js', 'core-js/modules/es6.object.to-string.js', 'core-js/modules/es6.string.includes.js', 'core-js/modules/es6.array.copy-within.js', 'core-js/modules/es7.array.includes.js', 'core-js/modules/es6.regexp.replace.js', 'core-js/modules/es6.function.name.js', 'core-js/modules/es6.number.constructor.js', 'core-js/modules/es6.regexp.search.js', 'core-js/modules/es7.string.pad-end.js', 'core-js/modules/es6.regexp.constructor.js', 'core-js/modules/es6.string.fixed.js', 'core-js/modules/es7.string.pad-start.js', 'core-js/modules/es6.string.repeat.js', 'core-js/modules/es7.string.trim-right.js', 'core-js/modules/es7.string.trim-left.js', 'core-js/modules/es6.array.from.js', 'core-js/modules/es6.string.ends-with.js', 'core-js/modules/es6.string.starts-with.js', 'core-js/modules/es6.array.find.js', 'core-js/modules/es6.promise.js'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Betools = factory());
}(this, (function () { 'use strict';

  function Utils() {}

  var utils = Utils;

  var formatString = 'yyyy-MM-dd HH:mm:ss';
  var setupDefaults = {
    treeOptions: {
      parentKey: 'parentId',
      key: 'id',
      children: 'children'
    },
    formatDate: formatString + '.SSSZ',
    formatString: formatString,
    dateDiffRules: [['yyyy', 31536000000], ['MM', 2592000000], ['dd', 86400000], ['HH', 3600000], ['mm', 60000], ['ss', 1000], ['S', 0]]
  };
  var setup = setupDefaults;

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _typeof_1 = createCommonjsModule(function (module) {
  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
  });

  var STRING_UNDEFINED = 'undefined';
  var objectToString = Object.prototype.toString;
  var objectAssignFns = Object.assign;

  function hasOwnProp(obj, key) {
    return obj.hasOwnProperty(key);
  }
  /* eslint-disable valid-typeof */


  function createInTypeof(type) {
    return function (obj) {
      return _typeof_1(obj) === type;
    };
  }

  function createInInObjectString(type) {
    return function (obj) {
      return '[object ' + type + ']' === objectToString.call(obj);
    };
  }
  /**
    * 指定方法后的返回值组成的新对象
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */


  function objectMap(obj, iterate, context) {
    var result = {};

    if (obj) {
      if (iterate) {
        context = context || this;

        if (!isFunction(iterate)) {
          iterate = property(iterate);
        }

        each(obj, function (val, index) {
          result[index] = iterate.call(context, val, index, obj);
        });
      } else {
        return obj;
      }
    }

    return result;
  }

  function cloneObj(obj) {
    var result = {};
    each(obj, function (val, key) {
      result[key] = deepClone(val);
    });
    return result;
  }

  function cloneArr(arr) {
    return utils.map(arr, deepClone);
  }

  function deepClone(obj) {
    return isPlainObject(obj) ? cloneObj(obj) : isArray(obj) ? cloneArr(obj) : obj;
  }
  /**
    * 浅拷贝/深拷贝
    *
    * @param {Object} obj 对象/数组
    * @param {Boolean} deep 是否深拷贝
    * @return {Object}
    */


  function clone(obj, deep) {
    if (obj) {
      return deep ? deepClone(obj) : objectAssign(isPlainObject(obj) ? {} : [], obj);
    }

    return obj;
  }
  /**
    * 该方法和 setTimeout 一样的效果，区别就是支持上下文和额外参数
    *
    * @param {Function} callback 函数
    * @param {Number} wait 延迟毫秒
    * @param {*} args 额外的参数
    * @return {Number}
   */


  function delay(callback, wait) {
    var args = arraySlice(arguments, 2);
    var context = this;
    return setTimeout(function () {
      callback.apply(context, args);
    }, wait);
  }
  /**
    * 创建一个绑定上下文的函数
    *
    * @param {Function} callback 函数
    * @param {Object} context 上下文
    * @param {*} args 额外的参数
    * @return {Object}
    */


  function bind(callback, context) {
    var args = arraySlice(arguments, 2);
    context = context || this;
    return function () {
      return callback.apply(context, arraySlice(arguments).concat(args));
    };
  }
  /**
    * 创建一个只能调用一次的函数,只会返回第一次执行后的结果
    *
    * @param {Function} callback 函数
    * @param {Object} context 上下文
    * @param {*} args 额外的参数
    * @return {Object}
    */


  function once(callback, context) {
    var done = false;
    var rest = null;
    var args = arraySlice(arguments, 2);
    context = context || this;
    return function () {
      if (done) {
        return rest;
      }

      rest = callback.apply(context, arraySlice(arguments).concat(args));
      done = true;
      return rest;
    };
  }
  /**
    * 创建一个函数, 调用次数超过 count 次之后执行回调并将所有结果记住后返回
    *
    * @param {Number} count 调用次数
    * @param {Function} callback 完成回调
    * @return {Object}
    */


  function after(count, callback, context) {
    var runCount = 0;
    var rests = [];
    context = context || this;
    return function () {
      runCount++;

      if (runCount <= count) {
        rests.push(arguments[0]);
      }

      if (runCount >= count) {
        callback.apply(context, [rests].concat(arraySlice(arguments)));
      }
    };
  }
  /**
    * 创建一个函数, 调用次数不超过 count 次之前执行回调并将所有结果记住后返回
    *
    * @param {Number} count 调用次数
    * @param {Function} callback 完成回调
    * @return {Object}
    */


  function before(count, callback, context) {
    var runCount = 0;
    var rests = [];
    context = context || this;
    return function () {
      runCount++;

      if (runCount < count) {
        rests.push(arguments[0]);
        callback.apply(context, [rests].concat(arraySlice(arguments)));
      }
    };
  }

  function isNumberFinite(obj) {
    return isNumber(obj) && isFinite(obj);
  }
  /**
    * 判断是否Undefined
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var isUndefined = createInTypeof(STRING_UNDEFINED);
  /**
    * 判断是否数组
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isArray = Array.isArray || createInInObjectString('Array');
  /**
    * 判断是否小数
    *
    * @param {Number} obj 数值
    * @return {Boolean}
    */

  function isFloat(obj) {
    return obj !== null && !isNaN(obj) && !isArray(obj) && !isInteger(obj);
  }
  /**
    * 判断是否整数
    *
    * @param {Number, String} number 数值
    * @return {Boolean}
    */


  var isInteger = function isInteger(obj) {
    return obj !== null && !isNaN(obj) && !isArray(obj) && obj % 1 === 0;
  };
  /**
    * 判断是否方法
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var isFunction = createInTypeof('function');
  /**
    * 判断是否Boolean对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isBoolean = createInTypeof('boolean');
  /**
    * 判断是否String对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isString = createInTypeof('string');
  /**
    * 判断是否Number对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isNumber = createInTypeof('number');
  /**
    * 判断是否RegExp对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isRegExp = createInInObjectString('RegExp');
  /**
    * 判断是否Object对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isObject = createInTypeof('object');
  /**
    * 判断是否对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  function isPlainObject(obj) {
    return obj ? obj.constructor === Object : false;
  }
  /**
    * 判断是否Date对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var isDate = createInInObjectString('Date');
  /**
    * 判断是否Error对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  var isError = createInInObjectString('Error');
  /**
    * 判断是否TypeError对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  function isTypeError(obj) {
    return obj ? obj.constructor === TypeError : false;
  }
  /**
    * 判断是否为空,包括空对象、空数组、空字符串
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  function isEmpty(obj) {
    for (var key in obj) {
      return false;
    }

    return true;
  }
  /**
    * 判断是否为Null
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  function isNull$1(obj) {
    return obj === null;
  }
  /**
    * 判断是否Symbol对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var supportSymbol = (typeof Symbol === "undefined" ? "undefined" : _typeof_1(Symbol)) !== STRING_UNDEFINED;

  function isSymbol(obj) {
    return supportSymbol && Symbol.isSymbol ? Symbol.isSymbol(obj) : _typeof_1(obj) === 'symbol';
  }
  /**
    * 判断是否Arguments对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var isArguments = createInInObjectString('Arguments');
  /**
    * 判断是否Element对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */

  function isElement(obj) {
    return !!(obj && isString(obj.nodeName) && isNumber(obj.nodeType));
  }
  /**
    * 判断是否Document对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var supportDocument = (typeof document === "undefined" ? "undefined" : _typeof_1(document)) !== STRING_UNDEFINED;

  function isDocument(obj) {
    return !!(obj && obj.nodeType === 9 && supportDocument);
  }
  /**
    * 判断是否Window对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var supportWindow = (typeof window === "undefined" ? "undefined" : _typeof_1(window)) !== STRING_UNDEFINED;

  function isWindow(obj) {
    return !!(obj && obj === obj.window && supportWindow);
  }
  /**
    * 判断是否FormData对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
    */


  var supportFormData = (typeof FormData === "undefined" ? "undefined" : _typeof_1(FormData)) !== STRING_UNDEFINED;

  function isFormData(obj) {
    return supportFormData && obj instanceof FormData;
  }
  /**
    * 判断是否Map对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
   */


  var supportMap = (typeof Map === "undefined" ? "undefined" : _typeof_1(Map)) !== STRING_UNDEFINED;

  function isMap(obj) {
    return supportMap && obj instanceof Map;
  }
  /**
    * 判断是否WeakMap对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
   */


  var supportWeakMap = (typeof WeakMap === "undefined" ? "undefined" : _typeof_1(WeakMap)) !== STRING_UNDEFINED;

  function isWeakMap(obj) {
    return supportWeakMap && obj instanceof WeakMap;
  }
  /**
    * 判断是否Set对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
   */


  var supportSet = (typeof Set === "undefined" ? "undefined" : _typeof_1(Set)) !== STRING_UNDEFINED;

  function isSet(obj) {
    return supportSet && obj instanceof Set;
  }
  /**
    * 判断是否WeakSet对象
    *
    * @param {Object} obj 对象
    * @return {Boolean}
   */


  var supportWeakSet = (typeof WeakSet === "undefined" ? "undefined" : _typeof_1(WeakSet)) !== STRING_UNDEFINED;

  function isWeakSet(obj) {
    return supportWeakSet && obj instanceof WeakSet;
  }
  /**
    * 判断是否闰年
    *
    * @param {Date} date 日期或数字
    * @return {Boolean}
    */


  function isLeapYear(date) {
    var year;
    var currentDate = date ? utils.toStringDate(date) : new Date();

    if (isDate(currentDate)) {
      year = currentDate.getFullYear();
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }

    return false;
  }
  /**
   * 判断属性中的键和值是否包含在对象中
   *
   * @param {Object/Array} obj 对象
   * @param {Object} source 值
   * @return {Boolean}
   */


  function isMatch(obj, source) {
    var objKeys = objectKeys(obj);
    var sourceKeys = objectKeys(source);

    if (sourceKeys.length) {
      if (utils.includeArrays(objKeys, sourceKeys)) {
        return utils.some(sourceKeys, function (key2) {
          return findIndexOf(objKeys, function (key1) {
            return key1 === key2 && isEqual(obj[key1], source[key2]);
          }) > -1;
        });
      }
    } else {
      return true;
    }

    return isEqual(obj, source);
  }
  /**
   * 深度比较两个对象之间的值是否相等
   *
   * @param {Object} obj1 值1
   * @param {Object} obj2 值2
   * @return {Boolean}
   */


  function isEqual(obj1, obj2) {
    return equalCompare(obj1, obj2, defaultCompare);
  }

  function defaultCompare(v1, v2) {
    return v1 === v2;
  }

  function equalCompare(val1, val2, compare, func, key, obj1, obj2) {
    if (val1 && val2 && !isNumber(val1) && !isNumber(val2) && !isString(val1) && !isString(val2)) {
      if (isRegExp(val1)) {
        return compare('' + val1, '' + val2, key, obj1, obj2);
      }

      if (isDate(val1) || isBoolean(val1)) {
        return compare(+val1, +val2, key, obj1, obj2);
      } else {
        var result, val1Keys, val2Keys;
        var isObj1Arr = isArray(val1);
        var isObj2Arr = isArray(val2);

        if (isObj1Arr || isObj2Arr ? isObj1Arr && isObj2Arr : val1.constructor === val2.constructor) {
          val1Keys = objectKeys(val1);
          val2Keys = objectKeys(val2);

          if (func) {
            result = func(val1, val2, key);
          }

          if (val1Keys.length === val2Keys.length) {
            return isUndefined(result) ? utils.every(val1Keys, function (key, index) {
              return key === val2Keys[index] && equalCompare(val1[key], val2[val2Keys[index]], compare, func, isObj1Arr || isObj2Arr ? index : key, val1, val2);
            }) : !!result;
          }

          return false;
        }
      }
    }

    return compare(val1, val2, key, obj1, obj2);
  }
  /**
   * 深度比较两个对象之间的值是否相等，使用自定义比较函数
   *
   * @param {Object} obj1 值1
   * @param {Object} obj2 值2
   * @param {Function} func 自定义函数
   * @return {Boolean}
   */


  function isEqualWith(obj1, obj2, func) {
    if (isFunction(func)) {
      return equalCompare(obj1, obj2, function (v1, v2, key, obj1, obj2) {
        var result = func(v1, v2, key, obj1, obj2);
        return isUndefined(result) ? defaultCompare(v1, v2) : !!result;
      }, func);
    }

    return equalCompare(obj1, obj2, defaultCompare);
  }
  /**
   * 返回一个获取对象属性的函数
   *
   * @param {String} name 属性名
   * @param {Object} defs 空值
   */


  function property(name, defs) {
    return function (obj) {
      return obj === null ? defs : obj[name];
    };
  }
  /**
    * 获取对象类型
    *
    * @param {Object} obj 对象
    * @return {String}
    */


  function getType(obj) {
    if (obj === null) {
      return '' + obj;
    }

    if (isSymbol(obj)) {
      return 'symbol';
    }

    if (isDate(obj)) {
      return 'date';
    }

    if (isArray(obj)) {
      return 'array';
    }

    if (isRegExp(obj)) {
      return 'regexp';
    }

    if (isError(obj)) {
      return 'error';
    }

    return _typeof_1(obj);
  }
  /**
    * 获取一个全局唯一标识
    *
    * @param {String} prefix 前缀
    * @return {Number}
    */


  var __uniqueId = 0;

  function uniqueId(prefix) {
    return (prefix ? '' + prefix : 0) + ++__uniqueId;
  }
  /**
    * 返回对象的长度
    *
    * @param {Object} obj 对象
    * @return {Number}
    */


  function getSize(obj) {
    var len = 0;

    if (isString(obj) || isArray(obj)) {
      return obj.length;
    }

    each(obj, function () {
      len++;
    });
    return len;
  }
  /**
   * 裁剪 Arguments 或数组 array，从 start 位置开始到 end 结束，但不包括 end 本身的位置
   * @param {Array/Arguments} array 数组或Arguments
   * @param {Number} startIndex 开始索引
   * @param {Number} endIndex 结束索引
   */


  function arraySlice(array, startIndex, endIndex) {
    var result = [];

    if (array) {
      for (startIndex = startIndex || 0, endIndex = endIndex || array.length; startIndex < endIndex; startIndex++) {
        result.push(array[startIndex]);
      }
    }

    return result;
  }

  function createIndexOf(name, callback) {
    return function (obj, val) {
      if (obj) {
        if (isString(obj) || isArray(obj)) {
          if (obj[name]) {
            return obj[name](val);
          }

          return callback(obj, val);
        }

        for (var key in obj) {
          if (hasOwnProp(obj, key)) {
            if (val === obj[key]) {
              return key;
            }
          }
        }
      }

      return -1;
    };
  }
  /**
    * 返回对象第一个索引值
    *
    * @param {Object} obj 对象
    * @param {Object} val 值
    * @return {Number}
    */


  var indexOf = createIndexOf('indexOf', function (obj, val) {
    for (var index = 0, len = obj.length; index < len; index++) {
      if (val === obj[index]) {
        return index;
      }
    }
  });
  /**
    * 从最后开始的索引值,返回对象第一个索引值
    *
    * @param {Object} array 对象
    * @param {Object} val 值
    * @return {Number}
    */

  var lastIndexOf = createIndexOf('lastIndexOf', function (obj, val) {
    for (var len = obj.length - 1; len >= 0; len--) {
      if (val === obj[len]) {
        return len;
      }
    }

    return -1;
  });

  function createiterateIndexOf(callback) {
    return function (obj, iterate, context) {
      if (obj && isFunction(iterate)) {
        context = this || context;

        if (isArray(obj) || isString(obj)) {
          return callback(obj, iterate, context);
        }

        for (var key in obj) {
          if (hasOwnProp(obj, key)) {
            if (iterate.call(context, obj[key], key, obj)) {
              return key;
            }
          }
        }
      }

      return -1;
    };
  }
  /**
    * 返回对象第一个索引值
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */


  var findIndexOf = createiterateIndexOf(function (obj, iterate, context) {
    for (var index = 0, len = obj.length; index < len; index++) {
      if (iterate.call(context, obj[index], index, obj)) {
        return index;
      }
    }

    return -1;
  });
  /**
    * 从最后开始的索引值,返回对象第一个索引值
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */

  var findLastIndexOf = createiterateIndexOf(function (obj, iterate, context) {
    for (var len = obj.length - 1; len >= 0; len--) {
      if (iterate.call(context, obj[len], len, obj)) {
        return len;
      }
    }

    return -1;
  });
  /**
    * 判断对象是否包含该值,成功返回true否则false
    *
    * @param {Object} obj 对象
    * @param {Object} val 值
    * @return {Boolean}
    */

  function includes(obj, val) {
    return indexOf(obj, val) !== -1;
  }

  function extend(destination, args, isClone) {
    var len = args.length;

    for (var source, index = 1; index < len; index++) {
      source = args[index];
      arrayEach(objectKeys(args[index]), isClone ? function (key) {
        destination[key] = clone(source[key], isClone);
      } : function (key) {
        destination[key] = source[key];
      });
    }

    return destination;
  }
  /**
    * 将一个或者多个对象值解构到目标对象
    *
    * @param {Object} destination 目标对象
    * @param {...Object}
    * @return {Boolean}
    */


  function destructuring(destination, sources) {
    if (destination && sources) {
      var rest = objectAssign.apply(this, [{}].concat(arraySlice(arguments, 1)));
      var restKeys = objectKeys(rest);
      arrayEach(objectKeys(destination), function (key) {
        if (includes(restKeys, key)) {
          destination[key] = rest[key];
        }
      });
    }

    return destination;
  }
  /**
    * 浅拷贝一个或者多个对象到目标对象中
    *
    * @param {Object} obj 目标对象
    * @param {...Object}
    * @return {Boolean}
    */


  var objectAssign = function objectAssign(target) {
    if (target) {
      var args = arguments;

      if (target === true) {
        if (args.length > 1) {
          target = isArray(target[1]) ? [] : {};
          return extend(target, args, true);
        }
      } else {
        return objectAssignFns ? objectAssignFns.apply(Object, args) : extend(target, args);
      }
    }

    return target;
  };
  /**
    * 字符串转JSON
    *
    * @param {String} str 字符串
    * @return {Object} 返回转换后对象
    */


  function toStringJSON(str) {
    if (isObject(str)) {
      return str;
    } else if (isString(str)) {
      try {
        return JSON.parse(str);
      } catch (e) {}
    }

    return {};
  }
  /**
    * JSON转字符串
    *
    * @param {Object} obj 对象
    * @return {String} 返回字符串
    */


  function toJSONString(obj) {
    return JSON.stringify(obj) || '';
  }

  function deleteProperty(obj, property) {
    try {
      delete obj[property];
    } catch (e) {
      obj[property] = undefined;
    }
  }
  /**
    * 清空对象
    *
    * @param {Object} obj 对象
    * @param {*} defs 默认值,如果不传（清空所有属性）、如果传对象（清空并继承)、如果传值(给所有赋值)
    * @param {Object/Array} assigns 默认值
    * @return {Object}
    */


  function clearObject(obj, defs, assigns) {
    if (obj) {
      var len;
      var isDefs = arguments.length > 1 && (defs === null || !isObject(defs));
      var extds = isDefs ? assigns : defs;

      if (isPlainObject(obj)) {
        objectEach(obj, isDefs ? function (val, key) {
          obj[key] = defs;
        } : function (val, key) {
          deleteProperty(obj, key);
        });

        if (extds) {
          objectAssign(obj, extds);
        }
      } else if (isArray(obj)) {
        if (isDefs) {
          len = obj.length;

          while (len > 0) {
            len--;
            obj[len] = defs;
          }
        } else {
          obj.length = 0;
        }

        if (extds) {
          obj.push.apply(obj, extds);
        }
      }
    }

    return obj;
  }

  function pluckProperty(name) {
    return function (obj, key) {
      return key === name;
    };
  }
  /**
    * 移除对象属性
    *
    * @param {Object/Array} obj 对象/数组
    * @param {Function/String} iterate 方法或属性
    * @param {Object} context 上下文
    * @return {Object/Array}
    */


  function removeObject(obj, iterate, context) {
    if (obj) {
      if (arguments.length > 1) {
        var removeKeys = [];
        var rest = [];
        context = context || this;

        if (!isFunction(iterate)) {
          iterate = pluckProperty(iterate);
        }

        each(obj, function (item, index, rest) {
          if (iterate.call(context, item, index, rest)) {
            removeKeys.push(index);
          }
        });

        if (isArray(obj)) {
          lastEach(removeKeys, function (item, key) {
            rest.push(obj[item]);
            obj.splice(item, 1);
          });
        } else {
          rest = {};
          arrayEach(removeKeys, function (key) {
            rest[key] = obj[key];
            deleteProperty(obj, key);
          });
        }

        return rest;
      }

      return clearObject(obj);
    }

    return obj;
  }

  function createGetObjects(name, getIndex) {
    var proMethod = Object[name];
    return function (obj) {
      var result = [];

      if (obj) {
        if (proMethod) {
          return proMethod(obj);
        }

        each(obj, getIndex > 1 ? function (key) {
          result.push(['' + key, obj[key]]);
        } : function () {
          result.push(arguments[getIndex]);
        });
      }

      return result;
    };
  }
  /**
    * 获取对象所有属性
    *
    * @param {Object} obj 对象/数组
    * @return {Array}
    */


  var objectKeys = createGetObjects('keys', 1);
  /**
    * 获取对象所有值
    *
    * @param {Object} obj 对象/数组
    * @return {Array}
    */

  var objectValues = createGetObjects('values', 0);
  /**
    * 获取对象所有属性、值
    *
    * @param {Object} obj 对象/数组
    * @return {Array}
    */

  var objectEntries = createGetObjects('entries', 2);

  function createPickOmit(case1, case2) {
    return function (obj, callback) {
      var item;
      var rest = {};
      var result = [];
      var context = this;
      var args = arguments;
      var index = 1;
      var len = args.length;

      if (!isFunction(callback)) {
        for (callback = 0; index < len; index++) {
          item = args[index];

          if (isArray(item)) {
            result = result.concat(item);
          } else {
            result.push(item);
          }
        }
      }

      each(obj, function (val, key) {
        if ((callback ? callback.call(context, val, key, obj) : findIndexOf(result, function (name) {
          return name === key;
        }) > -1) ? case1 : case2) {
          rest[key] = val;
        }
      });
      return rest;
    };
  }
  /**
   * 根据 keys 过滤指定的属性值，返回一个新的对象
   *
   * @param {Object} obj 对象
   * @param {String/Array} keys 键数组
   * @return {Object}
   */


  var pick = createPickOmit(1, 0);
  /**
   * 根据 keys 排除指定的属性值，返回一个新的对象
   *
   * @param {Object} obj 对象
   * @param {String/Array} keys 键数组
   * @return {Object}
   */

  var omit = createPickOmit(0, 1);
  /**
    * 获取对象第一个值
    *
    * @param {Object} obj 对象/数组
    * @return {Object}
    */

  function getFirst(obj) {
    return objectValues(obj)[0];
  }
  /**
    * 获取对象最后一个值
    *
    * @param {Object} obj 对象/数组
    * @return {Object}
    */


  function getLast(obj) {
    var list = objectValues(obj);
    return list[list.length - 1];
  }

  function arrayEach(obj, iterate, context) {
    if (obj.forEach) {
      obj.forEach(iterate, context);
    } else {
      for (var index = 0, len = obj.length; index < len; index++) {
        iterate.call(context || this, obj[index], index, obj);
      }
    }
  }

  function objectEach(obj, iterate, context) {
    for (var key in obj) {
      if (hasOwnProp(obj, key)) {
        iterate.call(context || this, obj[key], key, obj);
      }
    }
  }

  function lastObjectEach(obj, iterate, context) {
    lastArrayEach(objectKeys(obj), function (key) {
      iterate.call(context || this, obj[key], key, obj);
    });
  }

  function lastArrayEach(obj, iterate, context) {
    for (var len = obj.length - 1; len >= 0; len--) {
      iterate.call(context || this, obj[len], len, obj);
    }
  }
  /**
    * 迭代器,支持 return false 跳出循环 break
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */


  function forOf(obj, iterate, context) {
    if (obj) {
      context = context || this;

      if (isArray(obj)) {
        for (var index = 0, len = obj.length; index < len; index++) {
          if (iterate.call(context, obj[index], index, obj) === false) {
            break;
          }
        }
      } else {
        for (var key in obj) {
          if (hasOwnProp(obj, key)) {
            if (iterate.call(context, obj[key], key, obj) === false) {
              break;
            }
          }
        }
      }
    }
  }
  /**
    * 迭代器
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */


  function each(obj, iterate, context) {
    if (obj) {
      context = context || this;

      if (isArray(obj)) {
        return arrayEach(obj, iterate, context);
      }

      return objectEach(obj, iterate, context);
    }

    return obj;
  }
  /**
    * 迭代器,从最后开始迭代
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */


  function lastEach(obj, iterate, context) {
    if (obj) {
      return (isArray(obj) ? lastArrayEach : lastObjectEach)(obj, iterate, context || this);
    }

    return obj;
  }
  /**
    * 迭代器,从最后开始迭代,支持 return false 跳出循环 break
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */


  function lastForOf(obj, iterate, context) {
    if (obj) {
      var len, list;
      context = context || this;

      if (isArray(obj)) {
        for (len = obj.length - 1; len >= 0; len--) {
          if (iterate.call(context, obj[len], len, obj) === false) {
            break;
          }
        }
      } else {
        list = objectKeys(obj);

        for (len = list.length - 1; len >= 0; len--) {
          if (iterate.call(context, obj[list[len]], list[len], obj) === false) {
            break;
          }
        }
      }
    }
  }

  function createiterateEmpty(iterate) {
    return function () {
      return isEmpty(iterate);
    };
  }

  function getHGSKeys(property) {
    return property ? isArray(property) ? property : ('' + property).split('.') : [];
  }
  /**
   * 检查键、路径是否是该对象的属性
   * @param {Object/Array} data 对象
   * @param {String/Function} property 键、路径
   * @return {Boolean}
   */


  var hgKeyRE = /(.+)?\[(\d+)\]$/;
  var sKeyRE = /(.+)\[(\d+)\]$/;

  function has(obj, property) {
    if (obj) {
      if (hasOwnProp(obj, property)) {
        return true;
      } else {
        var prop, arrIndex, objProp, matchs, rest, isHas;
        var keys = getHGSKeys(property);
        var index = 0;
        var len = keys.length;

        for (rest = obj; index < len; index++) {
          isHas = false;
          prop = keys[index];
          matchs = prop ? prop.match(hgKeyRE) : '';

          if (matchs) {
            arrIndex = matchs[1];
            objProp = matchs[2];

            if (arrIndex) {
              if (rest[arrIndex]) {
                if (hasOwnProp(rest[arrIndex], objProp)) {
                  isHas = true;
                  rest = rest[arrIndex][objProp];
                }
              }
            } else {
              if (hasOwnProp(rest, objProp)) {
                isHas = true;
                rest = rest[objProp];
              }
            }
          } else {
            if (hasOwnProp(rest, prop)) {
              isHas = true;
              rest = rest[prop];
            }
          }

          if (isHas) {
            if (index === len - 1) {
              return true;
            }
          } else {
            break;
          }
        }
      }
    }

    return false;
  }

  function valGet(obj, key) {
    var matchs = key ? key.match(hgKeyRE) : '';
    return matchs ? matchs[1] ? obj[matchs[1]] ? obj[matchs[1]][matchs[2]] : undefined : obj[matchs[2]] : obj[key];
  }

  function pathGet(obj, property) {
    if (obj) {
      var rest, keys, len;
      var index = 0;

      if (hasOwnProp(obj, property)) {
        return obj[property];
      } else {
        keys = getHGSKeys(property);
        len = keys.length;

        if (len) {
          for (rest = obj; index < len; index++) {
            rest = valGet(rest, keys[index]);

            if (isUndefined(rest) || isNull$1(rest)) {
              return;
            }
          }
        }

        return rest;
      }
    }
  }
  /**
   * 获取对象的属性的值，如果值为 undefined，则返回默认值
   * @param {Object/Array} data 对象
   * @param {String/Function} property 键、路径
   * @param {Object} defaultValue 默认值
   * @return {Object}
   */


  function get(obj, property, defaultValue) {
    if (isNull$1(obj) || isUndefined(obj)) {
      return defaultValue;
    }

    var result = pathGet(obj, property);
    return isUndefined(result) ? defaultValue : result;
  }

  function valSet(obj, key, isSet, value) {
    if (obj[key]) {
      if (isSet) {
        obj[key] = value;
      }
    } else {
      var index;
      var matchs = key ? key.match(sKeyRE) : null;
      var rest = isSet ? value : {};

      if (matchs) {
        index = parseInt(matchs[2]);

        if (obj[matchs[1]]) {
          obj[matchs[1]][index] = rest;
        } else {
          obj[matchs[1]] = new Array(index + 1);
          obj[matchs[1]][index] = rest;
        }
      } else {
        obj[key] = rest;
      }

      return rest;
    }

    return obj[key];
  }
  /**
   * 设置对象属性上的值。如果属性不存在则创建它
   * @param {Object/Array} data 对象
   * @param {String/Function} property 键、路径
   * @param {Object} value 值
   */


  function set(obj, property, value) {
    if (obj) {
      var rest = obj;
      var keys = getHGSKeys(property);
      var len = keys.length;
      arrayEach(keys, function (key, index) {
        rest = valSet(rest, key, index === len - 1, value);
      });
    }

    return obj;
  }
  /**
    * 集合分组,默认使用键值分组,如果有iterate则使用结果进行分组
    *
    * @param {Array} obj 对象
    * @param {Function} iterate 回调/对象属性
    * @param {Object} context 上下文
    * @return {Object}
    */


  function groupBy(obj, iterate, context) {
    var groupKey;
    var result = {};

    if (obj) {
      context = this || context;

      if (iterate && isObject(iterate)) {
        iterate = createiterateEmpty(iterate);
      } else if (!isFunction(iterate)) {
        iterate = property(iterate);
      }

      each(obj, function (val, key) {
        groupKey = iterate ? iterate.call(context, val, key, obj) : val;

        if (result[groupKey]) {
          result[groupKey].push(val);
        } else {
          result[groupKey] = [val];
        }
      });
    }

    return result;
  }
  /**
    * 集合分组统计,返回各组中对象的数量统计
    *
    * @param {Array} obj 对象
    * @param {Function} iterate 回调/对象属性
    * @param {Object} context 上下文
    * @return {Object}
    */


  function countBy(obj, iterate, context) {
    var result = groupBy(obj, iterate, context || this);
    objectEach(result, function (item, key) {
      result[key] = item.length;
    });
    return result;
  }
  /**
    * 序号列表生成函数
    *
    * @param {Number} start 起始值
    * @param {Number} stop 结束值
    * @param {Number} step 自增值
    * @return {Object}
    */


  function range(start, stop, step) {
    var index, len;
    var result = [];
    var args = arguments;

    if (args.length < 2) {
      stop = args[0];
      start = 0;
    }

    index = start >> 0;
    len = stop >> 0;

    if (index < stop) {
      step = step >> 0 || 1;

      for (; index < len; index += step) {
        result.push(index);
      }
    }

    return result;
  }
  /**
    * 创建一个策略函数，当被重复调用函数的时候，至少每隔多少秒毫秒调用一次该函数
    *
    * @param {Function} callback 回调
    * @param {Number} wait 多少秒毫
    * @param {Object} options 参数{leading: 是否在之前执行, trailing: 是否在之后执行}
    * @return {Function}
    */


  function throttle(callback, wait, options) {
    var args, context;
    var opts = options || {};
    var runFlag = false;
    var timeout = 0;
    var optLeading = 'leading' in opts ? opts.leading : true;
    var optTrailing = 'trailing' in opts ? opts.trailing : false;

    var runFn = function runFn() {
      runFlag = true;
      callback.apply(context, args);
      timeout = setTimeout(endFn, wait);
    };

    var endFn = function endFn() {
      timeout = 0;

      if (!runFlag && optTrailing === true) {
        runFn();
      }
    };

    var cancelFn = function cancelFn() {
      var rest = timeout !== 0;
      clearTimeout(timeout);
      runFlag = false;
      timeout = 0;
      return rest;
    };

    var throttled = function throttled() {
      args = arguments;
      context = this;
      runFlag = false;

      if (timeout === 0) {
        if (optLeading === true) {
          runFn();
        } else if (optTrailing === true) {
          timeout = setTimeout(endFn, wait);
        }
      }
    };

    throttled.cancel = cancelFn;
    return throttled;
  }
  /**
    * 创建一个防反跳策略函数，在函数最后一次调用多少毫秒之后才会再次执行，如果在期间内重复调用会重新计算延迟
    *
    * @param {Function} callback 回调
    * @param {Number} wait 多少秒毫
    * @param {Object} options 参数{leading: 是否在之前执行, trailing: 是否在之后执行}
    * @return {Function}
    */


  function debounce(callback, wait, options) {
    var args, context;
    var opts = options || {};
    var runFlag = false;
    var timeout = 0;
    var isLeading = typeof options === 'boolean';
    var optLeading = 'leading' in opts ? opts.leading : isLeading;
    var optTrailing = 'trailing' in opts ? opts.trailing : !isLeading;
    var clearTimeoutFn = clearTimeout;

    var runFn = function runFn() {
      runFlag = true;
      timeout = 0;
      callback.apply(context, args);
    };

    var endFn = function endFn() {
      if (optLeading === true) {
        timeout = 0;
      }

      if (!runFlag && optTrailing === true) {
        runFn();
      }
    };

    var cancelFn = function cancelFn() {
      var rest = timeout !== 0;
      clearTimeoutFn(timeout);
      timeout = 0;
      return rest;
    };

    var debounced = function debounced() {
      runFlag = false;
      args = arguments;
      context = this;

      if (timeout === 0) {
        if (optLeading === true) {
          runFn();
        }
      } else {
        clearTimeoutFn(timeout);
      }

      timeout = setTimeout(endFn, wait);
    };

    debounced.cancel = cancelFn;
    return debounced;
  }

  var baseExports = {
    _hasOwnProp: hasOwnProp,
    isNaN: isNaN,
    isFinite: isNumberFinite,
    isUndefined: isUndefined,
    isArray: isArray,
    isFloat: isFloat,
    isInteger: isInteger,
    isFunction: isFunction,
    isBoolean: isBoolean,
    isString: isString,
    isNumber: isNumber,
    isRegExp: isRegExp,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isDate: isDate,
    isError: isError,
    isTypeError: isTypeError,
    isEmpty: isEmpty,
    isNull: isNull$1,
    isSymbol: isSymbol,
    isArguments: isArguments,
    isElement: isElement,
    isDocument: isDocument,
    isWindow: isWindow,
    isFormData: isFormData,
    isMap: isMap,
    isWeakMap: isWeakMap,
    isSet: isSet,
    isWeakSet: isWeakSet,
    isLeapYear: isLeapYear,
    isMatch: isMatch,
    isEqual: isEqual,
    isEqualWith: isEqualWith,
    property: property,
    getType: getType,
    uniqueId: uniqueId,
    getSize: getSize,
    slice: arraySlice,
    indexOf: indexOf,
    lastIndexOf: lastIndexOf,
    findIndexOf: findIndexOf,
    findLastIndexOf: findLastIndexOf,
    includes: includes,
    contains: includes,
    assign: objectAssign,
    extend: objectAssign,
    toStringJSON: toStringJSON,
    toJSONString: toJSONString,
    keys: objectKeys,
    values: objectValues,
    entries: objectEntries,
    pick: pick,
    omit: omit,
    first: getFirst,
    last: getLast,
    each: each,
    forOf: forOf,
    arrayEach: arrayEach,
    forEach: arrayEach,
    objectEach: objectEach,
    lastForOf: lastForOf,
    lastEach: lastEach,
    lastForEach: lastArrayEach,
    lastArrayEach: lastArrayEach,
    lastObjectEach: lastObjectEach,
    has: has,
    get: get,
    set: set,
    groupBy: groupBy,
    countBy: countBy,
    objectMap: objectMap,
    clone: clone,
    delay: delay,
    bind: bind,
    once: once,
    after: after,
    before: before,
    clear: clearObject,
    remove: removeObject,
    range: range,
    throttle: throttle,
    debounce: debounce,
    destructuring: destructuring
  };
  var base = baseExports;

  /**
    * 数组去重
    *
    * @param {Array} array 数组
    * @return {Array}
    */


  function arrayUniq(array) {
    var result = [];
    base.each(array, function (value) {
      if (!result.includes(value)) {
        result.push(value);
      }
    });
    return result;
  }
  /**
    * 将多个数的值返回唯一的并集数组
    *
    * @param {...Array} 数组
    * @return {Array}
    */


  function arrayUnion() {
    var args = arguments;
    var result = [];
    var index = 0;
    var len = args.length;

    for (; index < len; index++) {
      result = result.concat(toArray(args[index]));
    }

    return arrayUniq(result);
  }

  function sortByDef(v1, v2) {
    return v1 > v2 ? 1 : -1;
  }

  function sortMultis(name, compares) {
    return function (item1, item2) {
      var v1 = item1[name];
      var v2 = item2[name];

      if (v1 === v2) {
        return compares ? compares(item1, item2) : 0;
      }

      return sortByDef(v1, v2);
    };
  }

  function getSortPros(arr, list, iterate, context) {
    iterate = base.isArray(iterate) ? iterate : [iterate];
    base.arrayEach(iterate, function (prop, index) {
      base.arrayEach(list, base.isFunction(prop) ? function (val, key) {
        val[index] = prop.call(context, val.data, key, arr);
      } : function (val) {
        val[index] = base.get(val.data, prop);
      });
    });
    return iterate;
  }
  /**
    * 数组按属性值升序
    *
    * @param {Array} arr 数组
    * @param {Function/String/Array} iterate 方法或属性
    * @param {Object} context 上下文
    * @return {Array}
    */


  function arraySort(arr, iterate, context, STR_UNDEFINED) {
    if (arr) {
      if (iterate === STR_UNDEFINED) {
        return toArray(arr).sort(sortByDef);
      }

      var compares;
      var list = arrayMap(arr, function (item) {
        return {
          data: item
        };
      });
      var sortPros = getSortPros(arr, list, iterate, context || this);
      var len = sortPros.length;

      if (len) {
        while (len >= 0) {
          compares = sortMultis(len, compares);
          len--;
        }

        list = list.sort(compares);
      }

      return arrayMap(list, base.property('data'));
    }

    return [];
  }
  /**
    * 将一个数组随机打乱，返回一个新的数组
    *
    * @param {Array} array 数组
    * @return {Array}
    */


  function arrayShuffle(array) {
    var index;
    var result = [];
    var list = base.values(array);
    var len = list.length - 1;

    for (; len >= 0; len--) {
      index = len > 0 ? utils.random(0, len) : 0;
      result.push(list[index]);
      list.splice(index, 1);
    }

    return result;
  }
  /**
    * 从一个数组中随机返回几个元素
    *
    * @param {Array} array 数组
    * @param {Number} number 个数
    * @return {Array}
    */


  function arraySample(array, number) {
    var result = arrayShuffle(array);

    if (arguments.length <= 1) {
      return result[0];
    }

    if (number < result.length) {
      result.length = number || 0;
    }

    return result;
  }

  function createIterateHandle(prop, useArray, restIndex, matchValue, defaultValue) {
    return function (obj, iterate, context) {
      if (obj && iterate) {
        context = context || this;

        if (prop && obj[prop]) {
          return obj[prop](iterate, context);
        } else {
          if (useArray && base.isArray(obj)) {
            for (var index = 0, len = obj.length; index < len; index++) {
              if (!!iterate.call(context, obj[index], index, obj) === matchValue) {
                return [true, false, index, obj[index]][restIndex];
              }
            }
          } else {
            for (var key in obj) {
              if (base._hasOwnProp(obj, key)) {
                if (!!iterate.call(context, obj[key], key, obj) === matchValue) {
                  return [true, false, key, obj[key]][restIndex];
                }
              }
            }
          }
        }
      }

      return defaultValue;
    };
  }
  /**
    * 对象中的值中的每一项运行给定函数,如果函数对任一项返回true,则返回true,否则返回false
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Boolean}
    */


  var arraySome = createIterateHandle('some', 1, 0, true, false);
  /**
    * 对象中的值中的每一项运行给定函数,如果该函数对每一项都返回true,则返回true,否则返回false
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Boolean}
    */

  var arrayEvery = createIterateHandle('every', 1, 1, false, true);
  /**
    * 查找匹配第一条数据的键
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */

  var findKey = createIterateHandle('', 0, 2, true);
  /**
    * 查找匹配第一条数据
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */

  var arrayFind = createIterateHandle('find', 1, 3, true);
  /**
    * 根据回调过滤数据
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Object}
    */

  function arrayFilter(obj, iterate, context) {
    var result = [];

    if (obj && iterate) {
      context = context || this;

      if (obj.filter) {
        return obj.filter(iterate, context);
      }

      base.each(obj, function (val, key) {
        if (iterate.call(context, val, key, obj)) {
          result.push(val);
        }
      });
    }

    return result;
  }
  /**
    * 指定方法后的返回值组成的新数组
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, obj) 回调
    * @param {Object} context 上下文
    * @return {Array}
    */


  function arrayMap(obj, iterate, context) {
    var result = [];

    if (obj && arguments.length > 1) {
      context = context || this;

      if (!base.isFunction(iterate)) {
        iterate = base.property(iterate);
      }

      if (obj.map) {
        return obj.map(iterate, context);
      } else {
        base.each(obj, function () {
          result.push(iterate.apply(context, arguments));
        });
      }
    }

    return result;
  }
  /**
    * 求和函数，将数值相加
    *
    * @param {Array} array 数组
    * @param {Function/String} iterate 方法或属性
    * @param {Object} context 上下文
    * @return {Number}
    */


  function arraySum(array, iterate, context) {
    var result = 0;
    var toNumber = utils.toNumber;
    context = context || this;
    base.each(array, iterate ? base.isFunction(iterate) ? function () {
      result += toNumber(iterate.apply(context, arguments));
    } : function (val) {
      result += toNumber(val[iterate]);
    } : function (val) {
      result += toNumber(val);
    });
    return result;
  }
  /**
    * 求平均值函数
    *
    * @param {Array} array 数组
    * @param {Function/String} iterate 方法或属性
    * @param {Object} context 上下文
    * @return {Number}
    */


  function arrayMean(array, iterate, context) {
    return utils.toNumber(arraySum(array, iterate, context || this) / base.getSize(array));
  }
  /**
    * 接收一个函数作为累加器，数组中的每个值（从左到右）开始合并，最终为一个值。
    *
    * @param {Array} array 数组
    * @param {Function} callback 方法
    * @param {Object} initialValue 初始值
    * @return {Number}
    */


  function arrayReduce(array, callback, initialValue) {
    if (array) {
      var len, reduceMethod;
      var index = 0;
      var context = this;
      var previous = initialValue;
      var isInitialVal = arguments.length > 2;
      var keyList = base.keys(array);

      if (array.length && array.reduce) {
        reduceMethod = function reduceMethod() {
          return callback.apply(context, arguments);
        };

        if (isInitialVal) {
          return array.reduce(reduceMethod, previous);
        }

        return array.reduce(reduceMethod);
      }

      if (isInitialVal) {
        index = 1;
        previous = array[keyList[0]];
      }

      for (len = keyList.length; index < len; index++) {
        previous = callback.call(context, previous, array[keyList[index]], index, array);
      }

      return previous;
    }
  }
  /**
    * 浅复制数组的一部分到同一数组中的另一个位置,数组大小不变
    *
    * @param {Array} array 数组
    * @param {Number} target 从该位置开始替换数据
    * @param {Number} start 从该位置开始读取数据，默认为 0 。如果为负值，表示倒数
    * @param {Number} end 到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数
    * @return {Array}
    */


  function arrayCopyWithin(array, target, start, end) {
    if (base.isArray(array) && array.copyWithin) {
      return array.copyWithin(target, start, end);
    }

    var replaceIndex, replaceArray;
    var targetIndex = target >> 0;
    var startIndex = start >> 0;
    var len = array.length;
    var endIndex = arguments.length > 3 ? end >> 0 : len;

    if (targetIndex < len) {
      targetIndex = targetIndex >= 0 ? targetIndex : len + targetIndex;

      if (targetIndex >= 0) {
        startIndex = startIndex >= 0 ? startIndex : len + startIndex;
        endIndex = endIndex >= 0 ? endIndex : len + endIndex;

        if (startIndex < endIndex) {
          for (replaceIndex = 0, replaceArray = array.slice(startIndex, endIndex); targetIndex < len; targetIndex++) {
            if (replaceArray.length <= replaceIndex) {
              break;
            }

            array[targetIndex] = replaceArray[replaceIndex++];
          }
        }
      }
    }

    return array;
  }
  /**
    * 将一个数组分割成大小的组。如果数组不能被平均分配，那么最后一块将是剩下的元素
    *
    * @param {Array} array 数组
    * @param {Number} size 每组大小
    * @return {Array}
    */


  function chunk(array, size) {
    var index;
    var result = [];
    var arrLen = size >> 0 || 1;

    if (base.isArray(array)) {
      if (arrLen >= 0 && array.length > arrLen) {
        index = 0;

        while (index < array.length) {
          result.push(array.slice(index, index + arrLen));
          index += arrLen;
        }
      } else {
        result = array.length ? [array] : array;
      }
    }

    return result;
  }
  /**
   * 根据键数组、值数组对转换为对象
   *
   * @param {Array} props 键数组
   * @param {Number} values 值数组
   * @return {Object}
   */


  function zipObject(props, values) {
    var result = {};
    values = values || [];
    base.each(base.values(props), function (val, key) {
      result[val] = values[key];
    });
    return result;
  }
  /**
   * 将每个数组中相应位置的值合并在一起
   *
   * @param {Array*} array 数组
   */


  function zip() {
    return unzip(arguments);
  }
  /**
   * 与 zip 相反
   *
   * @param {Array} arrays 数组集合
   */


  function unzip(arrays) {
    var result = [];
    var index = 0;
    var len = utils.max(arrays, function (item) {
      return item.length || 0;
    }).length;

    for (; index < len; index++) {
      result.push(arrayMap(arrays, index));
    }

    return result;
  }
  /**
   * 将对象或者伪数组转为新数组
   *
   * @param {Array} obj 数组
   * @return {Array}
   */


  function toArray(array) {
    return arrayMap(array, function (item) {
      return item;
    });
  }
  /**
    * 判断数组是否包含另一数组
    *
    * @param {Array} array1 数组
    * @param {Array} array2 被包含数组
    * @return {Boolean}
    */


  function includeArrays(array1, array2) {
    var len;
    var index = 0;
    var includes = base.includes;

    if (base.isArray(array1) && base.isArray(array2)) {
      for (len = array2.length; index < len; index++) {
        if (!includes(array1, array2[index])) {
          return false;
        }
      }

      return true;
    }

    return includes(array1, array2);
  }
  /**
    * 获取数组对象中某属性值，返回一个数组
    *
    * @param {Array} array 数组
    * @param {String} key 属性值
    * @return {Array}
    */


  function pluck(obj, key) {
    return arrayMap(obj, key);
  }

  function deepGetObj(obj, path) {
    var index = 0;
    var len = path.length;

    while (obj && index < len) {
      obj = obj[path[index++]];
    }

    return len && obj ? obj : 0;
  }
  /**
   * 在list的每个元素上执行方法,任何传递的额外参数都会在调用方法的时候传递给它
   *
   * @param {Array} list
   * @param {Array/String/Function} path
   * @param {...Object} arguments
   * @return {Array}
   */


  function invokeMap(list, path) {
    var func;
    var args = arguments;
    var params = [];
    var paths = [];
    var index = 2;
    var len = args.length;

    for (; index < len; index++) {
      params.push(args[index]);
    }

    if (base.isArray(path)) {
      len = path.length - 1;

      for (index = 0; index < len; index++) {
        paths.push(path[index]);
      }

      path = path[len];
    }

    return arrayMap(list, function (context) {
      if (paths.length) {
        context = deepGetObj(context, paths);
      }

      func = context[path] || path;

      if (func && func.apply) {
        return func.apply(context, params);
      }
    });
  }
  /**
    * 将一个带层级的数据列表转成树结构
    *
    * @param {Array} array 数组
    * @param {Object} options {strict: false, parentKey: 'parentId', key: 'id', children: 'children', data: 'data'}
    * @return {Array}
    */


  function toArrayTree(array, options) {
    var opts = base.assign({}, setup.treeOptions, options);
    var optStrict = opts.strict;
    var optKey = opts.key;
    var optParentKey = opts.parentKey;
    var optChildren = opts.children;
    var optSortKey = opts.sortKey;
    var optReverse = opts.reverse;
    var optData = opts.data;
    var result = [];
    var treeMap = {};
    var idList, id, treeData, parentId;

    if (optSortKey) {
      array = arraySort(base.clone(array), optSortKey);

      if (optReverse) {
        array = array.reverse();
      }
    }

    idList = arrayMap(array, function (item) {
      return item[optKey];
    });
    base.each(array, function (item) {
      id = item[optKey];

      if (optData) {
        treeData = {};
        treeData[optData] = item;
      } else {
        treeData = item;
      }

      parentId = item[optParentKey];
      treeMap[id] = treeMap[id] || [];
      treeMap[parentId] = treeMap[parentId] || [];
      treeMap[parentId].push(treeData);
      treeData[optKey] = id;
      treeData[optParentKey] = parentId;
      treeData[optChildren] = treeMap[id];

      if (!optStrict || optStrict && !parentId) {
        if (!base.includes(idList, parentId)) {
          result.push(treeData);
        }
      }
    });

    if (optStrict) {
      strictTree(array, optChildren);
    }

    return result;
  }

  function strictTree(array, optChildren) {
    base.each(array, function (item) {
      if (item.children && !item.children.length) {
        base.remove(item, optChildren);
      }
    });
  }

  function unTreeList(result, array, opts) {
    var children;
    var optChildren = opts.children;
    var optData = opts.data;
    base.each(array, function (item) {
      children = item[optChildren];

      if (optData) {
        item = item[optData];
      }

      result.push(item);

      if (children) {
        unTreeList(result, children, opts);
      }
    });
    return result;
  }
  /**
    * 将一个树结构转成数组列表
    *
    * @param {Array} array 数组
    * @param {Object} options {children: 'children', data: 'data'}
    * @return {Array}
    */


  function toTreeArray(array, options) {
    return unTreeList([], array, base.assign({}, setup.treeOptions, options));
  }

  function createTreeFunc(handle) {
    return function (obj, iterate, options, context) {
      var opts = options || {};
      var optChildren = opts.children || 'children';
      return handle(null, obj, iterate, context || this, [], optChildren, opts.mapChildren || optChildren);
    };
  }

  function findTreeItem(parent, obj, iterate, context, path, parseChildren, mapChildren) {
    var item, key, index, len, paths, match;

    if (base.isArray(obj)) {
      for (index = 0, len = obj.length; index < len; index++) {
        item = obj[index];
        paths = path.concat(['' + index]);

        if (iterate.call(context, item, index, obj, paths, parent)) {
          return {
            index: index,
            item: item,
            path: paths,
            items: obj,
            parent: parent
          };
        }

        if (parseChildren && item) {
          match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), parseChildren);

          if (match) {
            return match;
          }
        }
      }
    } else {
      for (key in obj) {
        if (base._hasOwnProp(obj, key)) {
          item = obj[key];
          paths = path.concat([key]);

          if (iterate.call(context, item, index, obj, paths, parent)) {
            return {
              index: key,
              item: item,
              path: paths,
              items: obj
            };
          }

          if (parseChildren && item) {
            match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), parseChildren);

            if (match) {
              return match;
            }
          }
        }
      }
    }
  }
  /**
    * 从树结构中查找匹配第一条数据的键、值、路径
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, items, path, parent) 回调
    * @param {Object} options {children: 'children'}
    * @param {Object} context 上下文
    * @return {Object} { item, index, items, path }
    */


  var findTree = createTreeFunc(findTreeItem);

  function eachTreeItem(parent, obj, iterate, context, path, parseChildren, mapChildren) {
    var paths;
    base.each(obj, function (item, index) {
      paths = path.concat(['' + index]);
      iterate.call(context, item, index, obj, paths, parent);

      if (item && parseChildren) {
        eachTreeItem(item, item[parseChildren], iterate, context, paths, parseChildren);
      }
    });
  }
  /**
    * 从树结构中遍历数据的键、值、路径
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, items, path, parent) 回调
    * @param {Object} options {children: 'children', mapChildren: 'children}
    * @param {Object} context 上下文
    */


  var eachTree = createTreeFunc(eachTreeItem);

  function mapTreeItem(parent, obj, iterate, context, path, parseChildren, mapChildren) {
    var paths, rest;
    return arrayMap(obj, function (item, index) {
      paths = path.concat(['' + index]);
      rest = iterate.call(context, item, index, obj, paths, parent);

      if (rest && item && parseChildren && item[parseChildren]) {
        rest[mapChildren] = mapTreeItem(item, item[parseChildren], iterate, context, paths, parseChildren, mapChildren);
      }

      return rest;
    });
  }
  /**
    * 从树结构中指定方法后的返回值组成的新数组
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, items, path, parent) 回调
    * @param {Object} options {children: 'children'}
    * @param {Object} context 上下文
    * @return {Object/Array}
    */


  var mapTree = createTreeFunc(mapTreeItem);
  /**
    * 从树结构中根据回调过滤数据
    *
    * @param {Object} obj 对象/数组
    * @param {Function} iterate(item, index, items, path, parent) 回调
    * @param {Object} options {children: 'children'}
    * @param {Object} context 上下文
    * @return {Array}
    */

  function filterTree(obj, iterate, options, context) {
    var result = [];

    if (obj && iterate) {
      context = context || this;
      eachTree(obj, function (item, index, items, path, parent) {
        if (iterate.call(context, item, index, items, path, parent)) {
          result.push(item);
        }
      }, options);
    }

    return result;
  }

  var arrayExports = {
    uniq: arrayUniq,
    union: arrayUnion,
    sortBy: arraySort,
    shuffle: arrayShuffle,
    sample: arraySample,
    some: arraySome,
    every: arrayEvery,
    filter: arrayFilter,
    find: arrayFind,
    findKey: findKey,
    map: arrayMap,
    sum: arraySum,
    mean: arrayMean,
    reduce: arrayReduce,
    copyWithin: arrayCopyWithin,
    chunk: chunk,
    zip: zip,
    unzip: unzip,
    zipObject: zipObject,
    toArray: toArray,
    includeArrays: includeArrays,
    pluck: pluck,
    invoke: invokeMap,
    invokeMap: invokeMap,
    toArrayTree: toArrayTree,
    toTreeArray: toTreeArray,
    findTree: findTree,
    eachTree: eachTree,
    mapTree: mapTree,
    filterTree: filterTree
  };
  var array = arrayExports;

  /* eslint-disable valid-typeof */


  function isBrowseStorage(storage) {
    try {
      var testKey = '__xe_t';
      storage.setItem(testKey, 1);
      storage.removeItem(testKey);
      return true;
    } catch (e) {
      return false;
    }
  }

  function isBrowseType(type) {
    return navigator.userAgent.indexOf(type) > -1;
  }
  /**
    * 获取浏览器内核
    * @return Object
    */


  function browse() {
    var $body, $dom, isChrome, isEdge;
    var isMobile = false;
    var strUndefined = 'undefined';
    var result = {
      isNode: false,
      isMobile: isMobile,
      isPC: false,
      isDoc: (typeof document === "undefined" ? "undefined" : _typeof_1(document)) !== strUndefined
    };

    if ((typeof window === "undefined" ? "undefined" : _typeof_1(window)) === strUndefined && (typeof process === "undefined" ? "undefined" : _typeof_1(process)) !== strUndefined) {
      result.isNode = true;
    } else {
      isEdge = isBrowseType('Edge');
      isChrome = isBrowseType('Chrome');
      isMobile = /(Android|webOS|iPhone|iPad|iPod|SymbianOS|BlackBerry|Windows Phone)/.test(navigator.userAgent);

      if (result.isDoc) {
        $dom = document;
        $body = $dom.body || $dom.documentElement;
        base.each(['webkit', 'khtml', 'moz', 'ms', 'o'], function (core) {
          result['-' + core] = !!$body[core + 'MatchesSelector'];
        });
      }

      base.assign(result, {
        edge: isEdge,
        msie: !isEdge && result['-ms'],
        safari: !isChrome && !isEdge && isBrowseType('Safari'),
        isMobile: isMobile,
        isPC: !isMobile,
        isLocalStorage: isBrowseStorage(window.localStorage),
        isSessionStorage: isBrowseStorage(window.sessionStorage)
      });
    }

    return result;
  }
  /**
    * 复制内容到系统粘贴板
    *
    */


  var doc = window.document;

  function getContainer() {
    var $copy = doc.getElementById('$BESCopy');

    if (!$copy) {
      $copy = doc.createElement('input');
      $copy.id = '$BESCopy';
      $copy.style['width'] = '48px';
      $copy.style['height'] = '12px';
      $copy.style['position'] = 'fixed';
      $copy.style['z-index'] = '0';
      $copy.style['left'] = '-500px';
      $copy.style['top'] = '-500px';
      doc.body.appendChild($copy);
    }

    return $copy;
  }

  function copyContent(content) {
    var $copy = getContainer();
    var value = content === null || content === undefined ? '' : '' + content;

    try {
      $copy.value = value;
      $copy.focus();
      $copy.setSelectionRange(0, value.length);
      return doc.execCommand('copy', true);
    } catch (e) {}

    return false;
  }

  var browseExports = {
    browse: browse,
    copyContent: copyContent
  };
  var browse_1 = browseExports;

  var DAY_TIME = 86400000;
  var WEEK_TIME = DAY_TIME * 7;
  var STRING_FIRST = 'first';
  var STRING_LAST = 'last';
  /**
   * 返回当前时间戳
   *
   * @returns Number
   */

  var now = Date.now || function () {
    return getDateTime(new Date());
  };
  /**
   * 将日期格式化为时间戳
   *
    * @param {String/Number/Date} str 日期或数字
    * @param {String} format 解析日期格式
   * @returns Number
   */


  var timestamp = function timestamp(str, format) {
    if (arguments.length) {
      var date = toStringDate(str, format);
      return base.isDate(date) ? getDateTime(date) : date;
    }

    return now();
  };

  var dateFormatRules = [{
    rules: [['yyyy', 4], ['yy', 2]]
  }, {
    rules: [['MM', 2], ['M', 1]],
    offset: -1
  }, {
    rules: [['dd', 2], ['d', 1]]
  }, {
    rules: [['HH', 2], ['H', 1]]
  }, {
    rules: [['mm', 2], ['m', 1]]
  }, {
    rules: [['ss', 2], ['s', 1]]
  }, {
    rules: [['SSS', 3], ['SS', 2], ['S', 1]]
  }, {
    rules: [['ZZ', 5], ['Z', 6]]
  }];

  function getDateTime(date) {
    return date.getTime();
  }

  function _utcDateTime(dates) {
    return Date.UTC(dates[0], dates[1], dates[2], dates[3], dates[4], dates[5], dates[6]);
  }

  function _dateFullYear(date) {
    return date.getFullYear();
  }

  function _dateMonth(date) {
    return date.getMonth();
  }

  function getYMD(date) {
    return new Date(_dateFullYear(date), _dateMonth(date), date.getDate());
  }

  function getYMDTime(date) {
    return getDateTime(getYMD(date));
  }
  /**
   * 比较两个日期
   *
   * @param {Number/String/Date} date1 日期
   * @param {Number/String/Date} date2 日期
   * @param {String} format 格式化
   */


  function isDateSame(date1, date2, format) {
    if (date1 && date2) {
      return toDateString(date1, format) === toDateString(date2, format);
    }

    return false;
  }
  /**
    * 字符串转为日期
    *
    * @param {String/Number/Date} str 日期或数字
    * @param {String} format 解析日期格式(yyyy年份、MM月份、dd天、hh(12)HH(24)小时、mm分钟、ss秒、SSS毫秒、Z时区)
    * @return {String}
    */


  function toStringDate(str, format) {
    var arr, sIndex, index, rules, len, rest, isDate, tempMatch, zStr;
    var dates = [];

    if (str) {
      isDate = base.isDate(str);

      if (isDate || /^[0-9]{11,13}$/.test(str)) {
        rest = new Date(isDate ? getDateTime(str) : Number(str));
      } else if (base.isString(str)) {
        format = format || setup.formatDate;
        base.each(dateFormatRules, function (item) {
          for (index = 0, rules = item.rules, len = rules.length; index < len; index++) {
            arr = rules[index];
            sIndex = format.indexOf(arr[0]);

            if (sIndex > -1) {
              tempMatch = str.substring(sIndex, sIndex + arr[1]) || 0;

              if (item.offset) {
                tempMatch = parseFloat(tempMatch) + item.offset;
              }

              dates.push(tempMatch);
              break;
            } else if (index === len - 1) {
              dates.push(0);
            }
          }
        });
        zStr = dates[7]; // 解析时区

        if (zStr) {
          // 如果为UTC 时间
          if (zStr[0] === 'z' || zStr[0] === 'Z') {
            rest = new Date(_utcDateTime(dates));
          } else {
            // 如果指定时区，时区转换
            tempMatch = zStr.match(/([-+]{1})(\d{2}):?(\d{2})/);

            if (tempMatch) {
              rest = new Date(_utcDateTime(dates) - (tempMatch[1] === '-' ? -1 : 1) * parseInt(tempMatch[2]) * 3600000 + parseInt(tempMatch[3]) * 60000);
            }
          }
        } else {
          rest = new Date(dates[0], dates[1], dates[2], dates[3], dates[4], dates[5], dates[6]);
        }
      }
    }

    return !rest || isNaN(getDateTime(rest)) ? 'Invalid Date' : rest;
  }

  function handleCustomTemplate(date, formats, match, value) {
    var format = formats[match];

    if (format) {
      if (base.isFunction(format)) {
        return format(value, match, date);
      } else {
        return format[value];
      }
    }

    return value;
  }

  function formatPadStart(str, len, padStr) {
    str = '' + str;
    var index = str.length;

    while (index < len) {
      str = padStr + str;
      index++;
    }

    return str;
  }
  /**
    * 日期格式化为字符串
    *
    * @param {Date} date 日期或数字
    * @param {String} format 输出日期格式(年份(yy|yyyy)、月份(M|MM自动补0)、天(d|dd自动补0)、12小时制(h|hh自动补0)、24小时制(H|HH自动补0)、分钟(m|mm自动补0)、秒(s|ss自动补0)、毫秒(S|SSS自动补0)、D当年的第几天、a/A上午下午、e/E星期几、w当年的第几周、W当月的第几周、q当年第几个季度、Z时区)
    * @param {Object} options {formats: {q: ['日', '一', '二', '三', '四', '五', '六'], E: function (value, match, date) {return '三'}, }} 自定义格式化模板
    * @return {String}
    */


  function toDateString(date, format, options) {
    if (date) {
      date = toStringDate(date);

      if (base.isDate(date)) {
        var result = format || setup.formatString;
        var hours = date.getHours();
        var apm = hours < 12 ? 'am' : 'pm';
        var zoneHours = date.getTimezoneOffset() / 60 * -1;
        var formats = base.assign({}, setup.formatStringMatchs, options ? options.formats : null);
        var timeRules = [[/y{2,4}/g, '', function (match) {
          return ('' + _dateFullYear(date)).substr(4 - match.length);
        }], [/M{1,2}/g, _dateMonth(date) + 1], [/d{1,2}/g, date.getDate()], [/H{1,2}/g, hours], [/h{1,2}/g, hours <= 12 ? hours : hours - 12], [/m{1,2}/g, date.getMinutes()], [/s{1,2}/g, date.getSeconds()], [/S{1,3}/g, date.getMilliseconds()], [/a/g, '', function (match) {
          return handleCustomTemplate(date, formats, match, apm);
        }], [/A/g, '', function (match) {
          return handleCustomTemplate(date, formats, match, apm.toLocaleUpperCase());
        }], [/e/g, '', function (match) {
          return handleCustomTemplate(date, formats, match, date.getDay() - 1);
        }], [/E/g, '', function (match) {
          return handleCustomTemplate(date, formats, match, date.getDay());
        }], [/q/g, '', function (match) {
          return handleCustomTemplate(date, formats, match, Math.floor((_dateMonth(date) + 3) / 3));
        }], [/Z{1,2}/g, '', function (match) {
          return handleCustomTemplate(date, formats, match, (zoneHours >= 0 ? '+' : '-') + formatPadStart(zoneHours, 2, '0') + (match.length === 1 ? ':' : '') + '00');
        }], [/W{1,2}/g, '', function (match) {
          return formatPadStart(handleCustomTemplate(date, formats, match, getYearWeek(date)), match.length, '0');
        }], [/D{1,3}/g, '', function (match) {
          return formatPadStart(handleCustomTemplate(date, formats, match, getYearDay(date)), match.length, '0');
        }]];
        var item;
        var index = 0;
        var len = timeRules.length;

        for (; index < len; index++) {
          item = timeRules[index];
          result = result.replace(item[0], item[2] || function (match) {
            return formatPadStart(item[1], match.length, '0');
          });
        }

        return result;
      }

      return date;
    }

    return '';
  }
  /**
    * 返回前几年或后几年的日期
    *
    * @param {Date} date 日期或数字
    * @param {Number} year 年(默认当前年)、前几个年(数值)、后几个年(数值)
    * @param {Number/String} month 获取哪月(null默认当前年)、年初(first)、年末(last)、指定月份（0-11）
    * @return {Date}
    */


  function getWhatYear(date, year, month) {
    var number;
    date = toStringDate(date);

    if (base.isDate(date)) {
      if (year) {
        number = year && !isNaN(year) ? year : 0;
        date.setFullYear(_dateFullYear(date) + number);
      }

      if (month || !isNaN(month)) {
        if (month === STRING_FIRST) {
          return new Date(_dateFullYear(date), 0, 1);
        } else if (month === STRING_LAST) {
          date.setMonth(11);
          return getWhatMonth(date, 0, STRING_LAST);
        } else {
          date.setMonth(month);
        }
      }
    }

    return date;
  }
  /**
    * 返回前几月或后几月的日期
    *
    * @param {Date} date 日期或数字
    * @param {Number} month 月(默认当前月)、前几个月、后几个月
    * @param {Number/String} day 获取哪天(null默认当前天)、月初(first)、月末(last)、指定天数(数值)
    * @return {Date}
    */


  function getWhatMonth(date, month, day) {
    var monthOffset = month && !isNaN(month) ? month : 0;
    date = toStringDate(date);

    if (base.isDate(date)) {
      if (day || !isNaN(day)) {
        if (day === STRING_FIRST) {
          return new Date(_dateFullYear(date), _dateMonth(date) + monthOffset, 1);
        } else if (day === STRING_LAST) {
          return new Date(getDateTime(getWhatMonth(date, monthOffset + 1, STRING_FIRST)) - 1);
        } else {
          date.setDate(day);
        }
      }

      if (monthOffset) {
        date.setMonth(_dateMonth(date) + monthOffset);
      }
    }

    return date;
  }
  /**
    * 返回前几周或后几周的星期几
    *
    * @param {Date} date 日期
    * @param {Number} week 周(默认当前周)、前几周、后几周
    * @param {Number} day 星期天(默认0)、星期一(1)、星期二(2)、星期三(3)、星期四(4)、星期五(5)、星期六(6)
    * @return {Date}
    */


  function getWhatWeek(date, week, day) {
    var time, whatDayTime, currentDay, customDay;
    date = toStringDate(date);

    if (base.isDate(date)) {
      customDay = Number(/^[0-7]$/.test(day) ? day : date.getDay());
      currentDay = date.getDay();
      time = getDateTime(date);
      whatDayTime = time + ((customDay === 0 ? 7 : customDay) - (currentDay === 0 ? 7 : currentDay)) * DAY_TIME;

      if (week && !isNaN(week)) {
        whatDayTime += week * WEEK_TIME;
      }

      return new Date(whatDayTime);
    }

    return date;
  }
  /**
    * 返回前几天或后几天的日期
    *
    * @param {Date} date 日期或数字
    * @param {Number} day 天(默认当天)、前几天、后几天
    * @param {String} mode 获取时分秒(null默认当前时分秒)、日初(first)、日末(last)
    * @return {Date}
    */


  function getWhatDay(date, day, mode) {
    date = toStringDate(date);

    if (base.isDate(date) && !isNaN(day)) {
      date.setDate(date.getDate() + Number(day));

      if (mode === STRING_FIRST) {
        return new Date(_dateFullYear(date), _dateMonth(date), date.getDate());
      } else if (mode === STRING_LAST) {
        return new Date(getDateTime(getWhatDay(date, 1, STRING_FIRST)) - 1);
      }
    }

    return date;
  }
  /**
    * 返回某个月的第几周
    *
    * @param {Date} date 日期或数字
    * @return {Number}
    */


  function getMonthWeek(date) {
    var monthFirst, monthFirstWeek;
    var currentDate = toStringDate(date);

    if (base.isDate(currentDate)) {
      monthFirst = getWhatMonth(currentDate, 0, STRING_FIRST);
      monthFirstWeek = getWhatWeek(monthFirst, 0, 1);

      if (monthFirstWeek < monthFirst) {
        monthFirstWeek = getWhatWeek(monthFirst, 1, 1);
      }

      if (currentDate >= monthFirstWeek) {
        return Math.floor((getYMDTime(currentDate) - getYMDTime(monthFirstWeek)) / WEEK_TIME) + 1;
      }

      return getMonthWeek(getWhatWeek(currentDate, 0, 1));
    }

    return currentDate;
  }
  /**
    * 返回某个年份的第几天
    *
    * @param {Date} date 日期或数字
    * @return {Number}
    */


  function getYearDay(date) {
    date = toStringDate(date);

    if (base.isDate(date)) {
      return Math.floor((getYMDTime(date) - getYMDTime(getWhatYear(date, 0, STRING_FIRST))) / DAY_TIME) + 1;
    }

    return date;
  }
  /**
    * 返回某个年份的第几周
    *
    * @param {Date} date 日期或数字
    * @return {Number}
    */


  function getYearWeek(date) {
    date = toStringDate(date);

    if (base.isDate(date)) {
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
      var week = new Date(date.getFullYear(), 0, 4);
      return Math.round(((date.getTime() - week.getTime()) / DAY_TIME + (week.getDay() + 6) % 7 - 3) / 7) + 1;
    }

    return date;
  }
  /**
    * 返回某个年份的天数
    *
    * @param {Date} date 日期或数字
    * @param {Number} year 年(默认当年)、前几个年、后几个年
    * @return {Number}
    */


  function getDayOfYear(date, year) {
    date = toStringDate(date);

    if (base.isDate(date)) {
      return base.isLeapYear(getWhatYear(date, year)) ? 366 : 365;
    }

    return date;
  }
  /**
    * 返回某个月份的天数
    *
    * @param {Date} date 日期或数字
    * @param {Number} month 月(默认当月)、前几个月、后几个月
    * @return {Number}
    */


  function getDayOfMonth(date, month) {
    date = toStringDate(date);

    if (base.isDate(date)) {
      return Math.floor((getDateTime(getWhatMonth(date, month, STRING_LAST)) - getDateTime(getWhatMonth(date, month, STRING_FIRST))) / DAY_TIME) + 1;
    }

    return date;
  }
  /**
    * 返回两个日期之间差距,如果结束日期小于开始日期done为fasle
    *
    * @param {Date} startDate 开始日期
    * @param {Date} endDate 结束日期或当期日期
    * @param {Date} rule 自定义计算规则
    * @return {Object}
    */


  function getDateDiff(startDate, endDate, rules) {
    var startTime, endTime, item, diffTime, rule, len, index;
    var result = {
      done: false,
      time: 0
    };
    startDate = toStringDate(startDate);
    endDate = endDate ? toStringDate(endDate) : new Date();

    if (base.isDate(startDate) && base.isDate(endDate)) {
      startTime = getDateTime(startDate);
      endTime = getDateTime(endDate);

      if (startTime < endTime) {
        diffTime = result.time = endTime - startTime;
        rule = rules && rules.length > 0 ? rules : setup.dateDiffRules;
        result.done = true;

        for (index = 0, len = rule.length; index < len; index++) {
          item = rule[index];

          if (diffTime >= item[1]) {
            if (index === len - 1) {
              result[item[0]] = diffTime || 0;
            } else {
              result[item[0]] = Math.floor(diffTime / item[1]);
              diffTime -= result[item[0]] * item[1];
            }
          } else {
            result[item[0]] = 0;
          }
        }
      }
    }

    return result;
  }

  var dateExports = {
    now: now,
    timestamp: timestamp,
    isDateSame: isDateSame,
    toStringDate: toStringDate,
    toDateString: toDateString,
    getWhatYear: getWhatYear,
    getWhatMonth: getWhatMonth,
    getWhatWeek: getWhatWeek,
    getWhatDay: getWhatDay,
    getYearDay: getYearDay,
    getYearWeek: getYearWeek,
    getMonthWeek: getMonthWeek,
    getDayOfYear: getDayOfYear,
    getDayOfMonth: getDayOfMonth,
    getDateDiff: getDateDiff
  };
  var date = dateExports;

  var isBowseDoc = typeof document !== 'undefined';

  function toCookieUnitTime(unit, expires) {
    var num = parseFloat(expires);
    var nowdate = new Date();
    var time = nowdate.getTime();

    switch (unit) {
      case 'y':
        return date.getWhatYear(nowdate, num).getTime();

      case 'M':
        return date.getWhatMonth(nowdate, num).getTime();

      case 'd':
        return date.getWhatDay(nowdate, num).getTime();

      case 'h':
      case 'H':
        return time + num * 60 * 60 * 1000;

      case 'm':
        return time + num * 60 * 1000;

      case 's':
        return time + num * 1000;
    }

    return time;
  }

  function toCookieUTCString(date) {
    return (base.isDate(date) ? date : new Date(date)).toUTCString();
  }
  /**
   * cookie操作函数
   * @param {String/Array/Object} name 键/数组/对象
   * @param {String} value 值
   * @param {Object} options 参数
   *   @param {String} name: 键
   *   @param {Object} value: 值
   *   @param {String} path: 路径
   *   @param {String} domain: 作用域
   *   @param {Boolean} secure: 设置为安全的,只能用https协议
   *   @param {Number} expires: 过期时间,可以指定日期或者字符串，默认天
   */


  function cookie(name, value, options) {
    if (isBowseDoc) {
      var opts, expires, values, result, cookies, keyIndex;
      var inserts = [];
      var args = arguments;
      var decode = decodeURIComponent;
      var encode = encodeURIComponent;
      var $dom = document;
      var arrayEach = base.each;
      var objectAssign = base.assign;
      var isObject = base.isObject;

      if (this && this.$context) {
        this.$context = null;
      }

      if (base.isArray(name)) {
        inserts = name;
      } else if (args.length > 1) {
        inserts = [objectAssign({
          name: name,
          value: value
        }, options)];
      } else if (isObject(name)) {
        inserts = [name];
      }

      if (inserts.length > 0) {
        arrayEach(inserts, function (obj) {
          opts = objectAssign({}, setup.cookies, obj);
          values = [];

          if (opts.name) {
            expires = opts.expires;
            values.push(encode(opts.name) + '=' + encode(isObject(opts.value) ? JSON.stringify(opts.value) : opts.value));

            if (expires) {
              if (isNaN(expires)) {
                // UTCString || Unit
                expires = expires.replace(/^([0-9]+)(y|M|d|H|h|m|s)$/, function (text, num, unit) {
                  return toCookieUTCString(toCookieUnitTime(unit, num));
                });
              } else if (/^[0-9]{11,13}$/.test(expires) || base.isDate(expires)) {
                // Date || now
                expires = toCookieUTCString(expires);
              } else {
                // day
                expires = toCookieUTCString(toCookieUnitTime('d', expires));
              }

              opts.expires = expires;
            }

            arrayEach(['expires', 'path', 'domain', 'secure'], function (key) {
              if (opts[key] !== undefined) {
                values.push(opts[key] && key === 'secure' ? key : key + '=' + opts[key]);
              }
            });
          }

          $dom.cookie = values.join('; ');
        });
        return true;
      } else {
        result = {};
        cookies = $dom.cookie;

        if (cookies) {
          arrayEach(cookies.split('; '), function (val) {
            keyIndex = val.indexOf('=');
            result[decode(val.substring(0, keyIndex))] = decode(val.substring(keyIndex + 1) || '');
          });
        }

        return args.length === 1 ? result[name] : result;
      }
    }

    return false;
  }

  function isCookieKey(key) {
    return base.includes(cookieKeys(), key);
  }

  function setCookieItem(name, key, options) {
    cookie(name, key, options);
    return cookie;
  }

  function removeCookieItem(name, options) {
    cookie(name, 0, base.assign({
      expires: -1
    }, setup.cookies, options));
  }

  function cookieKeys() {
    return base.keys(cookie());
  }

  base.assign(cookie, {
    _c: false,
    isKey: isCookieKey,
    set: setCookieItem,
    setItem: setCookieItem,
    get: cookie,
    getItem: cookie,
    remove: removeCookieItem,
    removeItem: removeCookieItem,
    keys: cookieKeys,
    getJSON: cookie
  });
  var cookieExports = {
    cookie: cookie
  };
  var cookie_1 = cookieExports;

  var $locat = typeof location === 'undefined' ? 0 : location;
  var decode = decodeURIComponent;
  var encode = encodeURIComponent;

  function parseURLQuery(uri) {
    return parseParams(uri.split('?')[1] || '');
  }
  /**
   * 查询参数序列化
   *
   * @param {String} query 反序列化的字符串
   */


  function parseParams(str) {
    var items;
    var result = {};

    if (str && base.isString(str)) {
      base.each(str.split('&'), function (param) {
        items = param.split('=');
        result[decode(items[0])] = decode(items[1] || '');
      });
    }

    return result;
  }

  function stringifyParams(resultVal, resultKey, isArr) {
    var _arr;

    var result = [];
    base.each(resultVal, function (item, key) {
      _arr = base.isArray(item);

      if (base.isPlainObject(item) || _arr) {
        result = result.concat(stringifyParams(item, resultKey + '[' + key + ']', _arr));
      } else {
        result.push(encode(resultKey + '[' + (isArr ? '' : key) + ']') + '=' + encode(item === null ? '' : item));
      }
    });
    return result;
  }

  function getLocatOrigin() {
    return $locat ? $locat.origin || $locat.protocol + '//' + $locat.host : '';
  }

  function getBaseURL() {
    if ($locat) {
      var pathname = $locat.pathname;
      var lastIndex = base.lastIndexOf(pathname, '/') + 1;
      return getLocatOrigin() + (lastIndex === pathname.length ? pathname : pathname.substring(0, lastIndex));
    }

    return '';
  }

  function parseUrl(url) {
    var hashs, portText, searchs, parsed;
    var href = '' + url;

    if (href.indexOf('//') === 0) {
      href = ($locat ? $locat.protocol : '') + href;
    } else if (href.indexOf('/') === 0) {
      href = getLocatOrigin() + href;
    }

    searchs = href.replace(/#.*/, '').match(/(\?.*)/);
    parsed = {
      href: href,
      hash: '',
      host: '',
      hostname: '',
      protocol: '',
      port: '',
      search: searchs && searchs[1] && searchs[1].length > 1 ? searchs[1] : ''
    };
    parsed.path = href.replace(/^([a-z0-9.+-]*:)\/\//, function (text, protocol) {
      parsed.protocol = protocol;
      return '';
    }).replace(/^([a-z0-9.+-]*)(:\d+)?\/?/, function (text, hostname, port) {
      portText = port || '';
      parsed.port = portText.replace(':', '');
      parsed.hostname = hostname;
      parsed.host = hostname + portText;
      return '/';
    }).replace(/(#.*)/, function (text, hash) {
      parsed.hash = hash.length > 1 ? hash : '';
      return '';
    });
    hashs = parsed.hash.match(/#((.*)\?|(.*))/);
    parsed.pathname = parsed.path.replace(/(\?|#.*).*/, '');
    parsed.origin = parsed.protocol + '//' + parsed.host;
    parsed.hashKey = hashs ? hashs[2] || hashs[1] || '' : '';
    parsed.hashQuery = parseURLQuery(parsed.hash);
    parsed.searchQuery = parseURLQuery(parsed.search);
    return parsed;
  }
  /**
    * 获取地址栏信息
    *
    * @return Object
    */


  function locat() {
    return $locat ? parseUrl($locat.href) : {};
  }
  /**
   * 查询参数序列化
   *
   * @param {Object} query 序列化的对象
   */


  function serialize(query) {
    var _arr;

    var params = [];
    base.each(query, function (item, key) {
      if (item !== undefined) {
        _arr = base.isArray(item);

        if (base.isPlainObject(item) || _arr) {
          params = params.concat(stringifyParams(item, key, _arr));
        } else {
          params.push(encode(key) + '=' + encode(item === null ? '' : item));
        }
      }
    });
    return params.join('&').replace(/%20/g, '+');
  }

  var locatExports = {
    parseUrl: parseUrl,
    getBaseURL: getBaseURL,
    locat: locat,
    serialize: serialize,
    unserialize: parseParams
  };
  var locat_1 = locatExports;

  /**
   * 获取一个指定范围内随机数
   *
   * @param {Number} min 最小值
   * @param {Number} max 最大值
   * @return {Number}
   */


  function getRandom(min, max) {
    return min >= max ? min : (min = min >> 0) + Math.round(Math.random() * ((max || 9) - min));
  }

  function createMinMax(handle) {
    return function (arr, iterate) {
      return handle(utils.sortBy(base.clone(arr), iterate, this));
    };
  }
  /**
   * 获取最小值
   *
   * @param {Array} arr 数组
   * @param {Function} iterate(item, index, obj) 回调
   * @return {Number}
   */


  var arrayMin = createMinMax(function (result) {
    return result[0];
  });
  /**
   * 获取最大值
   *
   * @param {Array} arr 数组
   * @param {Function} iterate(item, index, obj) 回调
   * @return {Number}
   */

  var arrayMax = createMinMax(function (result) {
    return result.reverse()[0];
  });
  /**
   * 千分位分隔符、小数点
   *
   * @param {String/Number} num 数值
   * @param {Object} 参数 {spaceNumber: 分割位数(默认3), separator: 分隔符(默认,), fixed: 小数位数(默认null)}
   * @return {String}
   */

  function commafy(num, options) {
    num = ('' + num).replace(/,/g, '');

    if (num) {
      var opts = base.assign({
        spaceNumber: 3,
        separator: ','
      }, options);
      var optFixed = opts.fixed;
      var result = (optFixed ? stringToNumber(num).toFixed(optFixed) : num).split('.');
      return result[0].replace(new RegExp('(?=(?!(\\b))(\\d{' + opts.spaceNumber + '})+$)', 'g'), opts.separator) + (result[1] ? '.' + result[1] : '');
    }

    return num;
  }

  function createToNumber(handle) {
    return function (str) {
      if (str) {
        var num = handle(str);
        return isNaN(num) ? 0 : num;
      }

      return 0;
    };
  }
  /**
   * 和 Number.toFixed 类似，区别就是不会对小数进行四舍五入，结果返回字符串
   *
   * @param { String/Number } str 数值
   * @return {String}
   */


  function toFixedString(str, digits) {
    var nums = ('' + toFixedNumber(str, digits)).split('.');
    return digits ? [nums[0], '.', utils.padEnd(nums[1] || '', digits, '0')].join('') : nums[0];
  }
  /**
   * 和 Number.toFixed 类似，区别就是不会对小数进行四舍五入，结果返回数值
   *
   * @param { String/Number } str 数值
   * @return {String}
   */


  function toFixedNumber(str, digits) {
    if (digits) {
      return stringToNumber(('' + stringToNumber(str)).replace(new RegExp('(\\d+.\\d{0,' + digits + '}).*'), '$1'));
    }

    return stringToInteger(str);
  }
  /**
   * 转数值
   * @param { String/Number } str 数值
   *
   * @return {Number}
   */


  var stringToNumber = createToNumber(parseFloat);
  /**
   * 转整数
   * @param { String/Number } str 数值
   *
   * @return {Number}
   */

  var stringToInteger = createToNumber(parseInt);
  var numberExports = {
    random: getRandom,
    min: arrayMin,
    max: arrayMax,
    commafy: commafy,
    toFixedString: toFixedString,
    toFixedNumber: toFixedNumber,
    toNumber: stringToNumber,
    toInteger: stringToInteger
  };
  var number = numberExports;

  /**
   * 去除字符串左右两边的空格
   *
   * @param {String} str 字符串
   * @return {String}
   */


  function stringTrim(str) {
    return str && str.trim ? str.trim() : stringTrimRight(stringTrimLeft(str));
  }
  /**
   * 去除字符串左边的空格
   *
   * @param {String} str 字符串
   * @return {String}
   */


  function stringTrimLeft(str) {
    return str && str.trimLeft ? str.trimLeft() : ('' + str).replace(/^[\s\uFEFF\xA0]+/g, '');
  }
  /**
   * 去除字符串右边的空格
   *
   * @param {String} str 字符串
   * @return {String}
   */


  function stringTrimRight(str) {
    return str && str.trimRight ? str.trimRight() : ('' + str).replace(/[\s\uFEFF\xA0]+$/g, '');
  }

  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = {};
  base.each(escapeMap, function (item, key) {
    unescapeMap[escapeMap[key]] = key;
  });

  function formatEscaper(dataMap) {
    var replaceRegexp = new RegExp('(?:' + base.keys(dataMap).join('|') + ')', 'g');
    return function (str) {
      return ('' + str).replace(replaceRegexp, function (match) {
        return dataMap[match];
      });
    };
  }
  /**
   * 转义HTML字符串，替换&, <, >, ", ', `字符
   *
   * @param {String} str 字符串
   * @return {String}
   */


  var escape = formatEscaper(escapeMap);
  /**
   * 反转escape
   *
   * @param {String} str 字符串
   * @return {String}
   */

  var unescape$1 = formatEscaper(unescapeMap);
  /**
   * 将带字符串转成驼峰字符串,例如： project-name 转为 projectName
   *
   * @param {String} str 字符串
   * @return {String}
   */

  function camelCase(str) {
    return ('' + str).replace(/(-[a-zA-Z])/g, function (text, u) {
      return u.substring(1).toLocaleUpperCase();
    });
  }
  /**
   * 将带驼峰字符串转成字符串,例如： projectName 转为 project-name
   *
   * @param {String} str 字符串
   * @return {String}
   */


  function kebabCase(str) {
    return ('' + str).replace(/([A-Z])/g, function (text, u) {
      return '-' + u.toLowerCase();
    });
  }
  /**
   * 将字符串重复 n次
   *
   * @param {String} str 字符串
   * @param {Number} count 次数
   * @return {String}
   */


  function stringRepeat(str, count) {
    var rest = '' + str;

    if (str.repeat) {
      return str.repeat(count);
    }

    var list = isNaN(count) ? [] : new Array(parseInt(count));
    return list.join(rest) + (list.length > 0 ? rest : '');
  }
  /**
   * 用指定字符从前面开始补全字符串
   *
   * @param {String} str 字符串
   * @param {Number} targetLength 结果长度
   * @param {Number} padString 补全字符
   * @return {String}
   */


  function stringPadStart(str, targetLength, padString, UNDEFINED) {
    var rest = '' + str;
    targetLength = targetLength >> 0;
    padString = padString === UNDEFINED ? ' ' : '' + padString;

    if (rest.padStart) {
      return rest.padStart(targetLength, padString);
    }

    if (targetLength > rest.length) {
      targetLength -= rest.length;

      if (targetLength > padString.length) {
        padString += stringRepeat(padString, targetLength / padString.length);
      }

      return padString.slice(0, targetLength) + rest;
    }

    return rest;
  }
  /**
   * 用指定字符从后面开始补全字符串
   *
   * @param {String} str 字符串
   * @param {Number} targetLength 结果长度
   * @param {Number} padString 补全字符
   * @return {String}
   */


  function stringPadEnd(str, targetLength, padString, UNDEFINED) {
    var rest = '' + str;
    targetLength = targetLength >> 0;
    padString = padString === UNDEFINED ? ' ' : '' + padString;

    if (rest.padEnd) {
      return rest.padEnd(targetLength, padString);
    }

    if (targetLength > rest.length) {
      targetLength -= rest.length;

      if (targetLength > padString.length) {
        padString += stringRepeat(padString, targetLength / padString.length);
      }

      return rest + padString.slice(0, targetLength);
    }

    return rest;
  }
  /**
   * 判断字符串是否在源字符串的头部
   *
   * @param {String} str 字符串
   * @param {String/Number} val 值
   * @param {Number} startIndex 开始索引
   * @return {String}
   */


  function stringStartsWith(str, val, startIndex) {
    var rest = '' + str;
    return (arguments.length === 1 ? rest : rest.substring(startIndex)).indexOf(val) === 0;
  }
  /**
   * 判断字符串是否在源字符串的尾部
   *
   * @param {String} str 字符串
   * @param {String/Number} val 值
   * @param {Number} startIndex 开始索引
   * @return {String}
   */


  function stringEndsWith(str, val, startIndex) {
    var rest = '' + str;
    return arguments.length === 1 ? rest.indexOf(val) === rest.length - 1 : rest.substring(0, startIndex).indexOf(val) === startIndex - 1;
  }

  var stringExports = {
    trim: stringTrim,
    trimLeft: stringTrimLeft,
    trimRight: stringTrimRight,
    escape: escape,
    unescape: unescape$1,
    camelCase: camelCase,
    kebabCase: kebabCase,
    repeat: stringRepeat,
    padStart: stringPadStart,
    padEnd: stringPadEnd,
    startsWith: stringStartsWith,
    endsWith: stringEndsWith
  };
  var string = stringExports;

  //定义配置文件对象
  window.BECONFIG = {}; //Vue服务器顶级域名

  window.BECONFIG['topdomain'] = window.BECONFIG['topDomain'] = window.location.hostname.split('.').slice(-2).join('.'); //Vue服务器域名

  window.BECONFIG['domain'] = 'https://www.' + window.BECONFIG['topdomain']; //Vue-REST-API服务器域名

  window.BECONFIG['restAPI'] = 'https://api.' + window.BECONFIG['topdomain']; //API端服务器URL

  window.BECONFIG['domainURL'] = window.BECONFIG['domain'] + '/jeecg-boot'; //Vue服务器域名,不要删除domian属性，因为有些组件是这样写的，而且位于node_module里面

  window.BECONFIG['domian'] = window.BECONFIG['domain']; //API端服务器URL,不要删除domianURL属性，因为有些组件是这样写的，而且位于node_module里面

  window.BECONFIG['domianURL'] = window.BECONFIG['domain'] + '/jeecg-boot'; //下载服务器域名

  window.BECONFIG['uploadURL'] = 'https://upload.' + window.BECONFIG['topdomain']; //下载服务器域名

  window.BECONFIG['uploaxURL'] = "https://oa-system-oss.oss-cn-beijing.aliyuncs.com"; //下载服务器域名

  window.BECONFIG['downloadURL'] = window.BECONFIG['uploaxURL']; //OSS对象服务域名

  window.BECONFIG['ossURL'] = window.BECONFIG['uploaxURL']; //document下载服务器地址

  window.BECONFIG['docDownURL'] = window.BECONFIG['uploadURL']; //图片服务器域名

  window.BECONFIG['imgDomainURL'] = window.BECONFIG['uploadURL']; //KKFileView文档预览URL

  window.BECONFIG['previewURL'] = 'https://fileview.' + window.BECONFIG['topdomain'] + '/onlinePreview?officePreviewType=image&url='; //微软文档预览URL

  window.BECONFIG['officeURL'] = 'https://view.officeapps.live.com/op/view.aspx?src='; //图片压缩裁剪URL

  window.BECONFIG['thumborURL'] = 'https://thumbor.' + window.BECONFIG['topdomain'] + '/unsafe/fill/100/60/sm/0/plain/'; //图片预览URL

  window.BECONFIG['imageURL'] = window.BECONFIG['previewURL']; //多媒体预览URL

  window.BECONFIG['videoURL'] = window.BECONFIG['previewURL']; //内置文档预览URL

  window.BECONFIG['viewURL'] = window.BECONFIG['domainURL'] + '/generic/web/viewer.html?file='; //单独登录URL

  window.BECONFIG['casPrefixUrl'] = 'https://sso.' + window.BECONFIG['topdomain'] + '/cas'; //检测URL文件是否存在

  window.BECONFIG['validURL'] = window.BECONFIG['domain'] + '/sys/common/url?path='; //下载地址URL

  window.BECONFIG['staticDomainURL'] = window.BECONFIG['uploadURL']; //查询浏览器IP地址，所属地区

  window.BECONFIG['ipLocationURL'] = "https://apis.map.qq.com/ws/location/v1/ip?key=3BFBZ-ZKD3X-LW54A-ZT76D-E7AHO-4RBD5"; //查询天气预报URL

  window.BECONFIG['weatherURL'] = "https://weather.".concat(window.BECONFIG['topdomain']); //设置公式名称

  window.BECONFIG['company'] = '领地集团'; //文档转换时间

  window.BECONFIG['office_expire_time'] = 10000;
  var REQUEST_API_CONFIG = {
    domain: window.BECONFIG['domain'],
    restapi: window.BECONFIG['restAPI'],
    token: "".concat(window.BECONFIG['domain'], "/jeecg-boot/sys/common/token"),
    user: "".concat(window.BECONFIG['domain'], "/jeecg-boot/api/user"),
    role: "".concat(window.BECONFIG['domain'], "/jeecg-boot/api/role"),
    service: "".concat(window.BECONFIG['domain'], "/jeecg-boot/api/service"),
    permission: "".concat(window.BECONFIG['domain'], "/jeecg-boot/api/permission"),
    permissionNoPager: "".concat(window.BECONFIG['domain'], "/jeecg-boot/api/permission/no-pager")
  };
  var PDF_PREVIEW_URL = "/jeecg-boot/generic/web/viewer.html?file=";
  var OFFICE_PREVIEW_URL = '/onlinePreview?officePreviewType=image&url=';
  var OFFICE_PREVIEW_TYPE = ['doc', 'docx', 'xlsx', 'xls', 'ppt', 'pptx'];
  var WORKFLOW_STATUS = {
    1: '待提交',
    2: '处理中',
    3: '审核中',
    4: '已完成',
    5: '已知会'
  };
  var WORKSTEP_STATUS = {
    1: '-1',
    2: '0',
    3: '1',
    4: '2',
    5: '3'
  };
  var WORKSTEP_TYPE = {
    1: 'none',
    2: 'primary',
    3: 'primary',
    4: 'success',
    5: 'success'
  };
  var LEAVE_TYPE = {
    'affairs_leave': '事假',
    'sick_leave': '病假',
    'marital_leave': '婚假',
    'funeral_leave': '丧假',
    'maternity_leave': '产假',
    'paternity_leave': '陪产假',
    'annual_leave': '年假',
    'wr_injury_leave': '工伤假',
    'other_leave': '其他'
  };
  var STORAGE_KEY = 'system_oa_app';
  var TOKEN_KEY = 'Access-Token';
  var constExports = {
    PDF_PREVIEW_URL: PDF_PREVIEW_URL,
    OFFICE_PREVIEW_URL: OFFICE_PREVIEW_URL,
    OFFICE_PREVIEW_TYPE: OFFICE_PREVIEW_TYPE,
    WORKFLOW_STATUS: WORKFLOW_STATUS,
    WORKSTEP_STATUS: WORKSTEP_STATUS,
    WORKSTEP_TYPE: WORKSTEP_TYPE,
    LEAVE_TYPE: LEAVE_TYPE,
    REQUEST_API_CONFIG: REQUEST_API_CONFIG,
    STORAGE_KEY: STORAGE_KEY,
    TOKEN_KEY: TOKEN_KEY
  };
  var constant = constExports;

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var asyncToGenerator = _asyncToGenerator;

  /**
   * @function 检测URL是否有效
   * @param {*} url
   */
  function queryUrlValid$1(_x) {
    return _queryUrlValid.apply(this, arguments);
  }
  /**
   * @function 处理预览功能
   * @param {*} item
   */


  function _queryUrlValid() {
    _queryUrlValid = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(url) {
      var queryURL, res;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(window.BECONFIG && superagent)) {
                _context.next = 13;
                break;
              }

              queryURL = "".concat(window.BECONFIG['validURL']).concat(url);
              _context.prev = 2;
              _context.next = 5;
              return superagent.get(queryURL);

            case 5:
              res = _context.sent;
              console.log(' url :' + url + ' result :' + JSON.stringify(res));
              return _context.abrupt("return", res.body.success);

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](2);
              console.log(_context.t0);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 10]]);
    }));
    return _queryUrlValid.apply(this, arguments);
  }

  function handlePreview(_x2) {
    return _handlePreview.apply(this, arguments);
  }
  /**
   * @function 处理下载功能
   */


  function _handlePreview() {
    _handlePreview = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(item) {
      var type, existFlag, suffix;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!window.BECONFIG) {
                _context2.next = 8;
                break;
              }

              type = ['doc', 'docx', 'xlsx', 'xls', 'ppt', 'pptx']; //检测转化后的FileURL是否可用，如果可用则使用本地地址预览，否则使用kkfileview预览

              _context2.next = 4;
              return queryUrlValid$1(item.file);

            case 4:
              existFlag = _context2.sent;
              suffix = item.name.split('.');
              suffix = suffix[suffix.length - 1]; //如果文件地址不存在，则使用kkfileview预览模式，否则使用自带预览服务

              if (!existFlag && type.includes(suffix)) {
                window.open(window.BECONFIG["previewURL"] + item.msrc);
              } else {
                //window打开链接
                window.open(item.src);
              }

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _handlePreview.apply(this, arguments);
  }

  function handleDownLoad(_x3) {
    return _handleDownLoad.apply(this, arguments);
  }

  function _handleDownLoad() {
    _handleDownLoad = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(item) {
      return regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              //执行下载操作
              try {
                vant.Toast.success('开始下载中，请稍等...');
                window.saveAs(item.msrc, item.name);
              } catch (error) {
                window.open(item.msrc);
              }

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _handleDownLoad.apply(this, arguments);
  }

  var fileExports = {
    queryUrlValid: queryUrlValid$1,
    handlePreview: handlePreview,
    handleDownLoad: handleDownLoad
  };
  var file = fileExports;

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  var arrayLikeToArray = _arrayLikeToArray;

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }

  var arrayWithoutHoles = _arrayWithoutHoles;

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  var iterableToArray = _iterableToArray;

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  }

  var unsupportedIterableToArray = _unsupportedIterableToArray;

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var nonIterableSpread = _nonIterableSpread;

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
  }

  var toConsumableArray = _toConsumableArray;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var tools = /*#__PURE__*/function () {
    /** 构造函数 */
    function tools() {
      classCallCheck(this, tools);
    }
    /**
     * @description 过滤对象中为空的属性
     * @param obj
     * @returns {*}
     */


    createClass(tools, [{
      key: "filterObj",
      value: function filterObj(obj) {
        if (!(_typeof_1(obj) == 'object')) {
          return;
        }

        for (var key in obj) {
          if (obj.hasOwnProperty(key) && (obj[key] == null || obj[key] == undefined || obj[key] === '')) {
            delete obj[key];
          }
        }

        return obj;
      }
      /**
       * @description 过滤空对象
       * @param {*} data
       */

    }, {
      key: "deNull",
      value: function deNull(data) {
        var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        try {
          if (typeof data == 'undefined' || data == null || data == '' || JSON.stringify(data) == "{}") {
            return defaultValue;
          } else {
            return data;
          }
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * @description 过滤空对象
       * @param {*} data
       */

    }, {
      key: "isNull",
      value: function isNull(data) {
        try {
          if (typeof data == 'undefined' || data == null || data == '' || JSON.stringify(data) == "{}") {
            return true;
          } else {
            return false;
          }
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * @description 过滤空对象
       * @param {*} data
       */

    }, {
      key: "isBlank",
      value: function isBlank(data) {
        try {
          return isNull(data);
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * @description 过滤空对象
       * @param {*} data
       */

    }, {
      key: "isEmpty",
      value: function isEmpty(data) {
        try {
          return isNull(data);
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * @description JS Sleep休眠函数
       * @param {*} time
       */

    }, {
      key: "sleep",
      value: function () {
        var _sleep = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var time,
              _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  time = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1000;
                  return _context.abrupt("return", new Promise(function (resolve) {
                    return setTimeout(resolve, time);
                  }));

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function sleep() {
          return _sleep.apply(this, arguments);
        }

        return sleep;
      }()
      /**
       * @description 获取百分率占比(除法)
       * @param {*} value
       * @param {*} total
       * @param {*} ratio
       */

    }, {
      key: "divisionPercentage",
      value: function divisionPercentage() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;
        var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100.00;
        var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.00.toFixed(2);
        value = typeof value == 'string' ? parseFloat(value) : value;
        total = typeof total == 'string' ? parseFloat(total) : total;

        try {
          ratio = isNull(total) ? 0.00.toFixed(2) : parseFloat(value / total * 100).toFixed(2);
        } catch (error) {
          console.log(error);
        }

        return ratio;
      }
      /**
       * 深度克隆对象、数组
       * @param obj 被克隆的对象
       * @return 克隆后的对象
       */

    }, {
      key: "cloneObject",
      value: function cloneObject(obj) {
        return JSON.parse(JSON.stringify(obj));
      }
      /**
       * @description clone对象
       * @param {*} obj 被克隆对象
       */

    }, {
      key: "clone",
      value: function clone(obj) {
        return JSON.parse(JSON.stringify(obj));
      }
      /**
       * 随机生成数字
       *
       * 示例：生成长度为 12 的随机数：randomNumber(12)
       * 示例：生成 3~23 之间的随机数：randomNumber(3, 23)
       *
       * @param1 最小值 | 长度
       * @param2 最大值
       * @return int 生成后的数字
       */

    }, {
      key: "randomNumber",
      value: function randomNumber() {
        // 生成 最小值 到 最大值 区间的随机数
        var random = function random(min, max) {
          return Math.floor(Math.random() * (max - min + 1) + min);
        };

        if (arguments.length === 1) {
          var _arguments = Array.prototype.slice.call(arguments),
              length = _arguments[0]; // 生成指定长度的随机数字，首位一定不是 0


          var nums = toConsumableArray(Array(length).keys()).map(function (i) {
            return i > 0 ? random(0, 9) : random(1, 9);
          });

          return parseInt(nums.join(''));
        } else if (arguments.length >= 2) {
          var _arguments2 = Array.prototype.slice.call(arguments),
              min = _arguments2[0],
              max = _arguments2[1];

          return random(min, max);
        } else {
          return Number.NaN;
        }
      }
      /**
       * @description 检查是否为微信
       */

    }, {
      key: "isWechat",
      value: function isWechat() {
        var ua = navigator.userAgent.toLowerCase();
        var sua = window.localStorage.getItem('system_navigator_useragent') || '';

        if (ua.match(/MicroMessenger/i) == "micromessenger" || sua.match(/MicroMessenger/i) == "micromessenger") {
          //这就是微信用的内置浏览器
          return true;
        } else {
          return true;
        }
      }
      /**
       * @description 检查是否为微信
       */

    }, {
      key: "isWework",
      value: function isWework() {
        var ua = navigator.userAgent.toLowerCase();

        if (ua.match(/MicroMessenger/i) == "micromessenger") {
          //这就是微信用的内置浏览器
          return true;
        } else {
          return false;
        }
      }
      /**
       * @description 检查是否为微信
       */

    }, {
      key: "isPCWeb",
      value: function isPCWeb() {
        var ua = navigator.userAgent.toLowerCase();
        var sua = window.localStorage.getItem('system_navigator_useragent') || '';

        if (ua.match(/MicroMessenger/i) == "micromessenger" || sua.match(/MicroMessenger/i) == "micromessenger") {
          //这就是微信用的内置浏览器
          return false;
        } else {
          return true;
        }
      }
    }, {
      key: "queryZoneProject",
      value: function queryZoneProject() {
        var company = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var name = arguments.length > 1 ? arguments[1] : undefined;
        var zone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var project = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
        var temp = company.split(name);
        console.log("".concat(temp.toString()));

        if (temp[1].includes('>')) {
          temp[1] = temp[1].replace('项目组>', '');
          zone = temp[1].split('>')[0];
          project = temp[1].split('>')[1];
        } else {
          zone = temp[1];
        }

        return {
          company: company,
          zone: zone,
          project: project
        };
      }
    }, {
      key: "queryZoneProjectAll",
      value: function queryZoneProjectAll(company) {
        var cnamelist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['领地集团有限公司', '领悦服务', '宝瑞商管', '医疗健康板块', '金融板块', '邛崃创达公司'];
        var department = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

        try {
          var zone = '';
          var project = department ? department.slice(0, department.lastIndexOf('>')) : '';
          department = department ? department.slice(department.lastIndexOf('>') + 1) : '';

          var _iterator = _createForOfIteratorHelper(cnamelist),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var name = _step.value;

              if (company.includes(">".concat(name, ">"))) {
                var temp = queryZoneProject(company, ">".concat(name, ">"));
                company = name;
                zone = temp.zone;
                project = !temp.project ? project : temp.project;
                break;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return {
            company: company,
            zone: zone,
            project: project,
            department: department
          };
        } catch (error) {
          return {
            company: company,
            zone: '',
            project: '',
            department: department
          };
        }
      }
      /**
       * 随机生成字符串
       * @param length 字符串的长度
       * @param chats 可选字符串区间（只会生成传入的字符串中的字符）
       * @return string 生成的字符串
       */

    }, {
      key: "randomString",
      value: function randomString(length, chats) {
        if (!length) length = 1;
        if (!chats) chats = '0123456789qwertyuioplkjhgfdsazxcvbnm';
        var str = '';

        for (var i = 0; i < length; i++) {
          var num = randomNumber(0, chats.length - 1);
          str += chats[num];
        }

        return str;
      }
      /**
       * 随机生成uuid
       * @return string 生成的uuid
       */

    }, {
      key: "randomUUID",
      value: function randomUUID() {
        var chats = '0123456789abcdef';
        return randomString(32, chats);
      }
      /**
       * 下划线转驼峰
       * @param string
       * @returns {*}
       */

    }, {
      key: "underLine2CamelCase",
      value: function underLine2CamelCase(string) {
        return string.replace(/_([a-z])/g, function (all, letter) {
          return letter.toUpperCase();
        });
      }
      /**
       * 邮箱
       * @param {*} s
       */

    }, {
      key: "isEmail",
      value: function isEmail(s) {
        return /^([a-zA-Z0-9._-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(s);
      }
      /**
       * 手机号码
       * @param {*} s
       */

    }, {
      key: "isMobile",
      value: function isMobile(s) {
        return /^1[0-9]{10}$/.test(s);
      }
      /**
       * 电话号码
       * @param {*} s
       */

    }, {
      key: "isPhone",
      value: function isPhone(s) {
        return /^([0-9]{3,4}-)?[0-9]{7,8}$/.test(s);
      }
      /**
       * URL地址
       * @param {*} s
       */

    }, {
      key: "isURL",
      value: function isURL(s) {
        return /^http[s]?:\/\/.*/.test(s);
      }
      /**
       * @description 去除字符串中html标签
       * @param {*} str
       */

    }, {
      key: "delHtmlTag",
      value: function delHtmlTag(str) {
        try {
          if (isNull(str)) {
            return ""; //去掉所有的html标记
          } else {
            return deNull(str).replace(/<[^>]+>/g, "").replace(/&nbsp;/g, ""); //去掉所有的html标记
          }
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * @description 字符串缩略函数
       * @param {*} str
       */

    }, {
      key: "abbreviation",
      value: function abbreviation(str) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 75;

        try {
          if (deNull(str).length < length) {
            return deNull(str).trim();
          } else {
            return deNull(str).trim().substring(0, length) + '...';
          }
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * @description 查询文档对应预览地址
       * @param {*} text
       */

    }, {
      key: "queryFileViewURL",
      value: function () {
        var _queryFileViewURL = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(text) {
          var url, textURL, fileList, tempUrl, xurl, suffix, checkURL, existFlag;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  //文档URL
                  url = ''; //查询文档对应预览地址

                  _context2.prev = 1;
                  //获取小写文档下载地址
                  textURL = deNull(text).toLowerCase(); //如果不含有office文档

                  if (textURL.includes('doc') || textURL.includes('ppt') || textURL.includes('xls') || textURL.includes('pdf')) {
                    _context2.next = 5;
                    break;
                  }

                  return _context2.abrupt("return", false);

                case 5:
                  //文档数组
                  fileList = [];

                  if (text.indexOf(',') > 0) {
                    fileList = text.split(',');
                  } else {
                    fileList.push(text);
                  } //获取第一个office文档


                  url = window.__.find(fileList, function (text) {
                    //获取小写字符串
                    text = deNull(text).toLowerCase();
                    return text.includes('doc') || text.includes('ppt') || text.includes('xls') || text.includes('pdf');
                  }); //文档下载地址

                  url = window._CONFIG['docDownURL'] + '/' + url; //暂存文档地址

                  tempUrl = "".concat(url); //URL加密，保证中文路径可以被正常解析

                  xurl = url.replace('files/', 'files/convert/'); //去掉后缀

                  xurl = xurl.substring(0, xurl.lastIndexOf('.')); //获取文件后缀

                  suffix = deNull(url).substring(url.lastIndexOf('.'), url.length).toLowerCase(); //如果word文档，则使用微软API打开

                  url = deNull(suffix).includes('xls') ? xurl + '.html' : url; //如果word文档，则使用微软API打开

                  url = deNull(suffix).includes('doc') || deNull(suffix).includes('ppt') || deNull(suffix).includes('pdf') ? xurl + '.pdf' : url; //待检测URL

                  checkURL = decodeURIComponent(url); //打印checkURL

                  console.log('checkURL :' + checkURL); //设置加密路径

                  xurl = encodeURIComponent(xurl); //如果word文档，则使用微软API打开

                  url = deNull(suffix).includes('doc') || deNull(suffix).includes('ppt') || deNull(suffix).includes('pdf') ? decodeURIComponent(xurl) + '.pdf' : url; //检测文件URL标识

                  _context2.next = 21;
                  return queryUrlValid(checkURL);

                case 21:
                  existFlag = _context2.sent;

                  //如果文件地址不存在，则使用kkfileview预览模式
                  if (!existFlag) {
                    url = tempUrl;
                  } else {
                    url = checkURL;
                  } //打印预览地址日志


                  console.log('preview url :' + url);
                  _context2.next = 29;
                  break;

                case 26:
                  _context2.prev = 26;
                  _context2.t0 = _context2["catch"](1);
                  //打印错误日志
                  console.log('query file view url error :' + _context2.t0);

                case 29:
                  return _context2.abrupt("return", url);

                case 30:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, null, [[1, 26]]);
        }));

        function queryFileViewURL(_x) {
          return _queryFileViewURL.apply(this, arguments);
        }

        return queryFileViewURL;
      }()
      /**
       * @description 检测URL是否有效
       * @param {*} url
       */

    }, {
      key: "queryUrlValid",
      value: function () {
        var _queryUrlValid = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(url) {
          var queryURL, res;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  //提交URL
                  queryURL = "".concat(window._CONFIG['validURL']).concat(url);
                  _context3.prev = 1;
                  _context3.next = 4;
                  return window.superagent.get(queryURL);

                case 4:
                  res = _context3.sent;
                  console.log(' url :' + url + ' result :' + JSON.stringify(res));
                  return _context3.abrupt("return", res.body.success);

                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](1);
                  console.log(_context3.t0);

                case 12:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, null, [[1, 9]]);
        }));

        function queryUrlValid(_x2) {
          return _queryUrlValid.apply(this, arguments);
        }

        return queryUrlValid;
      }()
      /**
       * 获取URL参数值
       * @param {*} val
       */

    }, {
      key: "getUrlParam",
      value: function getUrlParam(name) {
        try {
          var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象

          var r = window.location.hash.substr(window.location.hash.indexOf('?') + 1).match(reg); //匹配目标参数

          if (r != null) return decodeURI(r[2]);
          return null; //返回参数值
        } catch (error) {
          console.log(error);
        }
      }
      /**
       * 获取URL参数值
       * @param {*} val
       */

    }, {
      key: "queryUrlParam",
      value: function queryUrlParam(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象

        var r = window.location.hash.substr(window.location.hash.indexOf('?') + 1).match(reg); //匹配目标参数

        if (r != null) return decodeURI(r[2]);
        return null; //返回参数值
      }
      /**
       * @description URI加密
       * @param {*} value
       */

    }, {
      key: "encodeURI",
      value: function encodeURI(value) {
        return window.encodeURIComponent(value);
      }
      /**
       * @description URI解密
       * @param {*} value
       */

    }, {
      key: "decodeURI",
      value: function decodeURI(value) {
        return window.decodeURIComponent(value);
      }
      /**
       * 获取URL参数值
       * @param {*} val
       */

    }, {
      key: "queryUrlString",
      value: function queryUrlString(name) {
        var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'history';

        try {
          if (flag == 'history') {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象

            var r = window.location.hash.substr(window.location.hash.indexOf('?') + 1).match(reg); //匹配目标参数

            if (r != null) {
              if (name == 'system_type') {
                localStorage.setItem('system_type', decodeURI(r[2]));
              }

              return decodeURI(r[2]);
            } else if (name == 'system_type') {
              return localStorage.getItem('system_type') || 'v2';
            }

            return null; //返回参数值
          } else {
            var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)');
            var r = window.location.search.substr(1).match(reg); //search,查询？后面的参数，并匹配正则

            if (r != null) return unescape(r[2]);
          }
        } catch (error) {
          console.error(error);
        }

        return '';
      }
      /**
       * @description 合成唯一编码
       */

    }, {
      key: "queryUniqueID",
      value: function queryUniqueID() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;
        //日期格式化
        var timestamp = new Date().getTime(); //定义动态编码

        var id = formatDate(timestamp, "yyyyMMddhhmmssS"); //打印日志

        console.log('动态编号 :' + id); //定义随机编码

        var random = Math.floor(Math.random() * 100000000000000000000) + "" + (Math.floor(Math.random() * 100000000000000000000) + ""); //打印随机编码

        console.log('随机编号 :' + random); //合成动态编码

        id = (id + random).replace(/\./g, '').substring(0, length); //返回唯一编码

        return id;
      }
      /**
       * @description 电话号码隐藏中间4位
       * @param {*} mobile 
       */

    }, {
      key: "mobileHide",
      value: function mobileHide(mobile) {
        mobile = mobile.slice(0, 11);
        var re = /(\d{3})(\d{4})(\d{4})/;
        return mobile.replace(re, "$1****$3");
      }
      /**
       * @description 电话号码隐藏中间4位
       * @param {*} mobile 
       */

    }, {
      key: "mobileEnsconce",
      value: function mobileEnsconce(mobile) {
        mobile = mobile.slice(0, 11);
        var re = /(\d{3})(\d{4})(\d{4})/;
        return mobile.replace(re, "$1****$3");
      }
      /**
       * @description 检测字符串是否包含字符函数
       * @param {*} origin
       * @param {*} arg
       */

    }, {
      key: "contain",
      value: function contain(origin, arg) {
        //设置前后缀信息
        origin = ",".concat(origin, ","); //设置包含的用户

        var ready = ''; //设置数组信息

        var array = null;

        try {
          array = arg.split(','); //遍历数据，并查询出含有的用户数据

          var _iterator2 = _createForOfIteratorHelper(array),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var item = _step2.value;
              ready = origin.includes(",".concat(item, ",")) ? "".concat(ready, ",").concat(item) : ready;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } catch (error) {
          console.log(error);
        } //去掉字符串开头的逗号


        if (ready.startsWith(',')) {
          ready = ready.substring(1);
        } //去掉字符串结尾的逗号


        if (ready.endsWith(',')) {
          ready = ready.substring(0, ready.length - 1);
        } //返回包含的用户数据


        return ready;
      }
    }]);

    return tools;
  }();

  var toolsExports = {
    tools: new tools()
  };
  var tools_1 = toolsExports;

  var methodExports = {};
  Object.assign(methodExports, array, base, browse_1, cookie_1, date, locat_1, number, string, constant, file, tools_1 // storageExports
  );
  var object = methodExports;

  /**
   * @function mixing functions 
   * @param {Object} methods
   */


  utils.mixin = function (methods) {
    object.each(methods, function (fn, name) {
      utils[name] = object.isFunction(fn) && fn._c !== false ? function () {
        var result = fn.apply(utils.$context, arguments);
        utils.$context = null;
        return result;
      } : fn;
    });
    return utils;
  };

  utils.setup = function (options) {
    object.assign(setup, options);
  };

  utils.mixin(object);
  var main = utils;
  var default_1 = utils;
  main.default = default_1;

  var xdataUtilsBtools = main;

  return xdataUtilsBtools;

})));
